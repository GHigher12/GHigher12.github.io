<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Opencv学习02</title>
    <url>/2022/01/15/Opencv%E5%AD%A6%E4%B9%A002/</url>
    <content><![CDATA[<h2 id="图像梯度处理"><a href="#图像梯度处理" class="headerlink" title="图像梯度处理"></a>图像梯度处理</h2><p>图像计算的是图像的边缘信息，它能反映图像像素的变化。如灰度值变化较大的地方，梯度值也较大；灰度值较小的地方，相应的梯度值较小。图像梯度就是指像素的已接到是。图像的边缘是指灰度值发生急剧变化的地方，边缘检测目的就是在不破坏图像信息的条件下，减少图像的数据量，绘制其边缘线图。</p>
<h3 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a>Sobel算子</h3><h5 id="Opencv中提供l了cv2-Sobel-函数"><a href="#Opencv中提供l了cv2-Sobel-函数" class="headerlink" title="Opencv中提供l了cv2.Sobel()函数"></a><strong>Opencv中提供l了<code>cv2.Sobel()</code>函数</strong></h5><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">dst = cv2.Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]])</span><br></pre></td></tr></table></figure></div>

<p>前四个是必须的参数：<br>src：需要处理的图像；<br>ddpteh：是图像的深度，-1表示采用的是与原图像相同的深度。目标图像的深度 必须大于等于原图像的深度；<br>dx和dy表示的是求导的阶数，0表示这个方向上没有求导，一般为0、1、2。<br>可选的参数：<br>dst：目标图像<br>ksize：Sobel算子的大小，必须为1、3、5、7。<br>scale：是缩放导数的比例常数，默认情况下没有伸缩系数；<br>delta：是一个可选的增量，将会加到最终的dst中，同样，默认情况下没有额外的值加到dst中；<br>borderType：判断图像边界的模式。这个参数默认值cv2.BORDER_DEFAULT。</p>
<h5 id="图像深度参数"><a href="#图像深度参数" class="headerlink" title="图像深度参数"></a>图像深度参数</h5><p>ddpteh这个参数代表dst图像的深度，可选的参数如CV_16S、CV_32F、CV_64F等。<br>由于Sobel算子计算的是差分，有正有负，并且可能存在超过255的数，因此如果采用8为深度的话，显示图像会有问题。</p>
<h5 id="计算水平方向偏导数的近似值"><a href="#计算水平方向偏导数的近似值" class="headerlink" title="计算水平方向偏导数的近似值"></a>计算水平方向偏导数的近似值</h5><p><img src="Sobelx.png" class="lazyload placeholder" data-srcset="Sobelx.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="sobelx"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_show</span>(<span class="params">name, img</span>):</span></span><br><span class="line">    cv2.imshow(name, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像梯度-Sobel算子 右-左</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;./images/cyclie.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 白：255 黑: 0 </span></span><br><span class="line"><span class="comment"># 从右向左白-黑为白 黑-白=-255 为负数则会截断取0</span></span><br><span class="line">img_sobelx = cv2.Sobel(img, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>, ksize=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 取绝对值后，-255处为白</span></span><br><span class="line">img_sobel = cv2.convertScaleAbs(img_sobelx)</span><br><span class="line"><span class="comment"># 水平方向合并</span></span><br><span class="line">img_all = np.hstack((img, img_sobelx, img_sobel))</span><br><span class="line">image_show(<span class="string">&#x27;img_all&#x27;</span>, img_all)</span><br></pre></td></tr></table></figure></div>

<p><img src="sol_x.png" class="lazyload placeholder" data-srcset="sol_x.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h5 id="计算垂直方向偏导数的近似值"><a href="#计算垂直方向偏导数的近似值" class="headerlink" title="计算垂直方向偏导数的近似值"></a>计算垂直方向偏导数的近似值</h5><p><img src="Sobely.png" class="lazyload placeholder" data-srcset="Sobely.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="sobely"></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图像梯度-Sobel算子 下-上</span></span><br><span class="line">img_sobely = cv2.Sobel(img, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>, ksize=<span class="number">3</span>)</span><br><span class="line">img_sobel = cv2.convertScaleAbs(img_sobely)</span><br><span class="line">img_all = np.hstack((img, img_sobely, img_sobel))</span><br><span class="line">image_show(<span class="string">&#x27;img_all&#x27;</span>, img_all)</span><br></pre></td></tr></table></figure></div>

<p><img src="sob_y.png" class="lazyload placeholder" data-srcset="sob_y.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="Scharr算子"><a href="#Scharr算子" class="headerlink" title="Scharr算子"></a>Scharr算子</h3><p>Scharr算子可被视为Sobel算子的改进，具有Sobel算子相同的计算速度，但是其精度更高。</p>
<p><strong>水平X:</strong></p>
<p><img src="Scharrx.png" class="lazyload placeholder" data-srcset="Scharrx.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p><strong>数值Y:</strong></p>
<p><img src="Scharry.png" class="lazyload placeholder" data-srcset="Scharry.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p><strong>使用</strong></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">panda_scharrx = cv2.Scharr(panda, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">panda_scharry = cv2.Scharr(panda, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="Laplacian算子"><a href="#Laplacian算子" class="headerlink" title="Laplacian算子"></a>Laplacian算子</h3><p>Laplacian算子是一种二姐导数算子，具有旋转不变性，可以满足不同方向上的边缘检测要求。<br><strong>使用</strong></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">car = cv2.imread(<span class="string">&#x27;./images/car.png&#x27;</span>)</span><br><span class="line">car_Lap = cv2.Laplacian(car, cv2.CV_64F)</span><br><span class="line"><span class="comment"># 取绝对值</span></span><br><span class="line">car_Lap = cv2.convertScaleAbs(car_Lap)</span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line">car_all = np.hstack((car, car_Lap))</span><br><span class="line">image_show(<span class="string">&#x27;car_all&#x27;</span>, car_all)</span><br></pre></td></tr></table></figure></div>

<p><img src="car_lap.png" class="lazyload placeholder" data-srcset="car_lap.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
]]></content>
      <categories>
        <category>视觉处理</category>
        <category>Opencv</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Opencv学习01</title>
    <url>/2021/12/14/Opencv%E5%AD%A6%E4%B9%A001/</url>
    <content><![CDATA[<h3 id="读取、显示、保存图片-输出图片像素值、尺寸"><a href="#读取、显示、保存图片-输出图片像素值、尺寸" class="headerlink" title="读取、显示、保存图片, 输出图片像素值、尺寸"></a>读取、显示、保存图片, 输出图片像素值、尺寸</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_show</span>(<span class="params">name, img</span>):</span></span><br><span class="line">    <span class="comment"># 显示图像</span></span><br><span class="line">    cv2.imshow(name, img)</span><br><span class="line">    <span class="comment"># 等待按键,时间单位为ms,若为0或-1表示无限等待</span></span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 释放所有窗口</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;./images/cat.png&quot;</span>)</span><br><span class="line"><span class="comment"># 图像调整为灰度图像</span></span><br><span class="line">img_gray = cv2.imread(<span class="string">&#x27;./images/cat.png&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="comment"># print(img)  # 打印像素值</span></span><br><span class="line"><span class="comment"># 打印尺寸【h, w, c】</span></span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment"># [h, w]</span></span><br><span class="line"><span class="built_in">print</span>(img_gray.shape)</span><br><span class="line"><span class="comment"># 保存图像</span></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;./images_save/cat_gray.png&#x27;</span>, img_gray)</span><br><span class="line">image_show(<span class="string">&#x27;img&#x27;</span>, img)</span><br><span class="line">image_show(<span class="string">&#x27;img_gray&#x27;</span>, img_gray)</span><br></pre></td></tr></table></figure></div>

<p><img src="cat_gray.png" class="lazyload placeholder" data-srcset="cat_gray.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="图像裁剪和拆分图像为b-g-r三通道"><a href="#图像裁剪和拆分图像为b-g-r三通道" class="headerlink" title="图像裁剪和拆分图像为b,g,r三通道"></a>图像裁剪和拆分图像为b,g,r三通道</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_show</span>(<span class="params">name, img</span>):</span></span><br><span class="line">    cv2.imshow(name, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_bgr</span>(<span class="params">num1, num2, img</span>):</span></span><br><span class="line">    img[:, :, num1] = <span class="number">0</span></span><br><span class="line">    img[:, :, num2] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img_cat = cv2.imread(<span class="string">&quot;./images/cat.png&quot;</span>)</span><br><span class="line">img_car = cv2.imread(<span class="string">&quot;./images/car.png&quot;</span>)</span><br><span class="line"><span class="comment"># 拆分图像为b,g,r通道</span></span><br><span class="line">b, g, r = cv2.split(img_car)</span><br><span class="line"><span class="built_in">print</span>(img_cat.shape)</span><br><span class="line"><span class="comment"># 图像裁剪</span></span><br><span class="line">img_cut = img_cat[<span class="number">150</span>:<span class="number">400</span>, <span class="number">250</span>:<span class="number">450</span>]</span><br><span class="line">image_show(<span class="string">&#x27;img_cut&#x27;</span>, img_cut)</span><br><span class="line">image_show(<span class="string">&#x27;b&#x27;</span>, b)  <span class="comment"># 显示b通道</span></span><br><span class="line">image_show(<span class="string">&#x27;g&#x27;</span>, g)  <span class="comment"># 显示g通道</span></span><br><span class="line">image_show(<span class="string">&#x27;r&#x27;</span>, r)  <span class="comment"># 显示r通道</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img src="img_bgr.png" class="lazyload placeholder" data-srcset="img_bgr.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="图像只保留单通道"><a href="#图像只保留单通道" class="headerlink" title="图像只保留单通道"></a>图像只保留单通道</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_show</span>(<span class="params">name, img</span>):</span></span><br><span class="line">    cv2.imshow(name, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只保留一个通道</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_bgr</span>(<span class="params">num1, num2, img</span>):</span></span><br><span class="line">    cur_img = img.copy()</span><br><span class="line">    cur_img[:, :, num1] = <span class="number">0</span></span><br><span class="line">    cur_img[:, :, num2] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> cur_img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img_cat = cv2.imread(<span class="string">&quot;./images/cat.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">b, g, r = cv2.split(img_cat)</span><br><span class="line"><span class="built_in">print</span>(img_cat.shape)</span><br><span class="line">img_b = image_bgr(<span class="number">1</span>, <span class="number">2</span>, img_cat)  <span class="comment"># 只保留b通道</span></span><br><span class="line">img_g = image_bgr(<span class="number">0</span>, <span class="number">2</span>, img_cat)  <span class="comment"># 只保留g通道</span></span><br><span class="line">img_r = image_bgr(<span class="number">0</span>, <span class="number">0</span>, img_cat)  <span class="comment"># 只保留r通道</span></span><br><span class="line"></span><br><span class="line">image_show(<span class="string">&#x27;img_b&#x27;</span>, img_b)</span><br><span class="line">image_show(<span class="string">&#x27;img_g&#x27;</span>, img_g)</span><br><span class="line">image_show(<span class="string">&#x27;img_r&#x27;</span>, img_r)</span><br><span class="line">img_BGR = np.hstack((img_b, img_g, img_r))</span><br><span class="line">image_show(<span class="string">&#x27;img_BGR&#x27;</span>, img_BGR)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;./images_save/img_BGR.png&#x27;</span>, img_BGR)</span><br></pre></td></tr></table></figure></div>

<p><img src="cat_bgr.png" class="lazyload placeholder" data-srcset="cat_bgr.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="图像比例调整与计算"><a href="#图像比例调整与计算" class="headerlink" title="图像比例调整与计算"></a>图像比例调整与计算</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_show</span>(<span class="params">name, img</span>):</span></span><br><span class="line">    <span class="comment"># 显示图像</span></span><br><span class="line">    cv2.imshow(name, img)</span><br><span class="line">    <span class="comment"># 等待按键,时间单位为ms,若为0或-1表示无限等待</span></span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 释放所有窗口</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;./images/cat.png&quot;</span>)</span><br><span class="line"><span class="comment"># 图像调整为灰度图像</span></span><br><span class="line">img_gray = cv2.imread(<span class="string">&#x27;./images/cat.png&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="comment"># img_1 = cv2.resize(img, (200, 200))</span></span><br><span class="line">img_1 = cv2.resize(img, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">1.5</span>, fy=<span class="number">1</span>)</span><br><span class="line">image_show(<span class="string">&#x27;img&#x27;</span>, img_1)</span><br><span class="line"><span class="built_in">print</span>(img[:<span class="number">5</span>, :, <span class="number">0</span>])  <span class="comment"># 打印像素值</span></span><br><span class="line"><span class="comment"># 像素相加 越界取余</span></span><br><span class="line"><span class="built_in">print</span>((img+<span class="number">10</span>)[:<span class="number">5</span>, :, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># 像素相加 越界=255</span></span><br><span class="line"><span class="built_in">print</span>(cv2.add(img, <span class="number">10</span>)[:<span class="number">5</span>, :, <span class="number">0</span>])</span><br></pre></td></tr></table></figure></div>

<p><img src="img_bili.png" class="lazyload placeholder" data-srcset="img_bili.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="图像阈值"><a href="#图像阈值" class="headerlink" title="图像阈值"></a>图像阈值</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_show</span>(<span class="params">name, img</span>):</span></span><br><span class="line">    <span class="comment"># 显示图像</span></span><br><span class="line">    cv2.imshow(name, img)</span><br><span class="line">    <span class="comment"># 等待按键,时间单位为ms,若为0或-1表示无限等待</span></span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 释放所有窗口</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;./images/cat.png&quot;</span>)</span><br><span class="line">ret1, dst1 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)  <span class="comment"># 二值化阈值处理</span></span><br><span class="line">ret2, dst2 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)  <span class="comment"># 反二值化阈值处理</span></span><br><span class="line">ret3, dst3 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TRUNC)  <span class="comment"># 截断阈值处理</span></span><br><span class="line">ret4, dst4 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO)  <span class="comment"># 超零值化处理</span></span><br><span class="line">ret5, dst5 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO_INV)  <span class="comment"># 低零值化处理</span></span><br><span class="line"></span><br><span class="line">images = [img, dst1, dst2, dst3, dst4, dst5]</span><br><span class="line">title = [<span class="string">&#x27;img&#x27;</span>, <span class="string">&#x27;BINARY&#x27;</span>, <span class="string">&#x27;BINARY_INV&#x27;</span>, <span class="string">&#x27;TRUNC&#x27;</span>, <span class="string">&#x27;TOZERO&#x27;</span>, <span class="string">&#x27;TOZERO_INV&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="comment"># 行，列，索引</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(images[i][:, :, ::-<span class="number">1</span>], <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(title[i])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>

<p><img src="img_yuzhi.png" class="lazyload placeholder" data-srcset="img_yuzhi.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
]]></content>
      <categories>
        <category>视觉处理</category>
        <category>Opencv</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Opencv学习03</title>
    <url>/2022/01/16/Opencv%E5%AD%A6%E4%B9%A003/</url>
    <content><![CDATA[<h3 id="Canny边缘检测"><a href="#Canny边缘检测" class="headerlink" title="Canny边缘检测"></a>Canny边缘检测</h3><p>1）使用高斯滤波，平滑图像，滤除噪声</p>
<p>2）计算图像中每个像素点的梯度强度和方向</p>
<p>3）应用非极大值抑制，以消除边缘检测带来的杂散响应</p>
<p>4）应用双阈值检测来确定真实和潜在的边缘</p>
<p><img src="%E5%8F%8C%E9%98%88%E5%80%BC%E6%A3%80%E6%B5%8B.png" class="lazyload placeholder" data-srcset="%E5%8F%8C%E9%98%88%E5%80%BC%E6%A3%80%E6%B5%8B.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p>5）通过抑制孤立的边缘最终完成边缘检测</p>
<p><code>cv2.Canny</code>函数：</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">cv2.Canny(image, threshold1, threshold2[, edges[, apertureSize[, L2gradient ]]]) </span><br></pre></td></tr></table></figure></div>

<ul>
<li>第一个参数是需要处理的原图像，该图像必须为单通道的灰度图；</li>
<li>第二个参数是阈值1，即minVal;</li>
<li>第三个参数是阈值2 ，即maxVal;</li>
<li>选参数中apertureSize就是Sobel算子的大小;</li>
<li>L2gradient参数是一个布尔值，如果为真，则使用更精确的L2范数进行计算（即两个方向的倒数的平方和再开放），否则使用L1范数（直接将两个方向导数的绝对值相加）。</li>
</ul>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canny边缘检测</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;./images/car.png&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"><span class="comment"># h, w = img.shape[:2]</span></span><br><span class="line"><span class="comment"># M = np.float32([[0.5, 0, 0], [0, 0.5, 0]])</span></span><br><span class="line"><span class="comment"># minVal：20 maxVal：100</span></span><br><span class="line">img_canny1 = cv2.Canny(img, <span class="number">20</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># minVal：50 maxVal：100</span></span><br><span class="line">img_canny2 = cv2.Canny(img, <span class="number">50</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># minVal：80 maxVal：100</span></span><br><span class="line">img_canny3 = cv2.Canny(img, <span class="number">80</span>, <span class="number">100</span>)</span><br><span class="line">img_canny = np.hstack((img_canny1, img_canny2, img_canny3))</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;./images/car_canny.png&#x27;</span>, img_canny)</span><br><span class="line">image_show(<span class="string">&#x27;img_canny&#x27;</span>, img_canny)</span><br></pre></td></tr></table></figure></div>

<p><img src="car_canny.png" class="lazyload placeholder" data-srcset="car_canny.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
]]></content>
      <categories>
        <category>视觉处理</category>
        <category>Opencv</category>
      </categories>
  </entry>
  <entry>
    <title>PIL库的使用</title>
    <url>/2021/12/12/PIL%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="打开、显示、保存图片"><a href="#打开、显示、保存图片" class="headerlink" title="打开、显示、保存图片"></a>打开、显示、保存图片</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用模块</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 打开图片</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 显示图片</span></span><br><span class="line">image.show()</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">image.save(<span class="string">&#x27;C:/Users/25354/Desktop/orange_cat.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 保存不同格式</span></span><br><span class="line">image.save(<span class="string">&#x27;C:/Users/25354/Desktop/cat.bmp&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="cat.png" class="lazyload placeholder" data-srcset="cat.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="图片增加文字"><a href="#图片增加文字" class="headerlink" title="图片增加文字"></a>图片增加文字</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;cat.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 调用画图模块</span></span><br><span class="line">draw = ImageDraw.Draw(img)</span><br><span class="line"><span class="comment"># 调用字体模块</span></span><br><span class="line">font = ImageFont.truetype(<span class="string">&#x27;C:/Windows/Fonts/Arial.ttf&#x27;</span>, <span class="number">24</span>)</span><br><span class="line"><span class="comment"># 增加文字</span></span><br><span class="line">draw.text((<span class="number">30</span>, <span class="number">50</span>), <span class="string">&quot;Orange_Cat&quot;</span>, fill=<span class="string">&quot;white&quot;</span>, font=font)</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure></div>

<p><img src="orange_cat.png" class="lazyload placeholder" data-srcset="orange_cat.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="滤镜功能"><a href="#滤镜功能" class="headerlink" title="滤镜功能"></a>滤镜功能</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFilter</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;car.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 轮廓滤波</span></span><br><span class="line">img_contour = img.<span class="built_in">filter</span>(ImageFilter.CONTOUR)</span><br><span class="line"><span class="comment"># 浮雕滤波</span></span><br><span class="line">img_emboss = img.<span class="built_in">filter</span>(ImageFilter.EMBOSS)</span><br><span class="line">img_contour.show()</span><br><span class="line">img_emboss.show()</span><br></pre></td></tr></table></figure></div>

<p><img src="car%E6%BB%A4%E6%B3%A2.png" class="lazyload placeholder" data-srcset="car%E6%BB%A4%E6%B3%A2.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h5 id="ImageFilter类中预定义了如下滤波方法："><a href="#ImageFilter类中预定义了如下滤波方法：" class="headerlink" title="ImageFilter类中预定义了如下滤波方法："></a><code>ImageFilter</code>类中预定义了如下滤波方法：</h5><table>
<thead>
<tr>
<th align="center">定义</th>
<th align="center">滤波</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BLUR</td>
<td align="center">模糊滤波</td>
</tr>
<tr>
<td align="center">CONTOUR</td>
<td align="center">轮廓滤波</td>
</tr>
<tr>
<td align="center">DETAIL</td>
<td align="center">细节滤波</td>
</tr>
<tr>
<td align="center">EDGE_ENHANCE</td>
<td align="center">边界增强滤波</td>
</tr>
<tr>
<td align="center">EDGE_ENHANCE_MORE</td>
<td align="center">边界增强滤波（程度更深）</td>
</tr>
<tr>
<td align="center">EMBOSS</td>
<td align="center">浮雕滤波</td>
</tr>
<tr>
<td align="center">FIND_EDGES</td>
<td align="center">寻找边界滤波</td>
</tr>
<tr>
<td align="center">SMOOTH</td>
<td align="center">平滑滤波</td>
</tr>
<tr>
<td align="center">SMOOTH_MORE</td>
<td align="center">平滑滤波（程度更深）</td>
</tr>
<tr>
<td align="center">SHARPEN</td>
<td align="center">锐化滤波</td>
</tr>
<tr>
<td align="center">GaussianBlur(radius=2)</td>
<td align="center">高斯模糊</td>
</tr>
</tbody></table>
<h3 id="镜像功能"><a href="#镜像功能" class="headerlink" title="镜像功能"></a>镜像功能</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;表情包.jpg&#x27;</span>)</span><br><span class="line">img.show()</span><br><span class="line"><span class="comment"># 左右镜像</span></span><br><span class="line">img_lr = img.transpose(Image.FLIP_LEFT_RIGHT)</span><br><span class="line">img_lr.show()</span><br><span class="line"><span class="comment"># 上下镜像</span></span><br><span class="line">img_tb = img.transpose(Image.FLIP_TOP_BOTTOM)</span><br><span class="line">img_tb.show()</span><br></pre></td></tr></table></figure></div>

<p><img src="%E8%A1%A8%E6%83%85%E5%8C%85_lr_tb.png" class="lazyload placeholder" data-srcset="%E8%A1%A8%E6%83%85%E5%8C%85_lr_tb.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="拼接功能"><a href="#拼接功能" class="headerlink" title="拼接功能"></a>拼接功能</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;表情包.jpg&#x27;</span>)</span><br><span class="line">img_lr = Image.<span class="built_in">open</span>(<span class="string">&#x27;表情包lr.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印尺寸</span></span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line"><span class="comment"># 创建白布</span></span><br><span class="line"><span class="comment"># Image.new(&#x27;RGB&#x27;、&#x27;RGB2&#x27;, size, color)</span></span><br><span class="line">img_new = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">584</span>, <span class="number">300</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line"><span class="comment"># 拼接</span></span><br><span class="line">img_new.paste(img, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">img_new.paste(img_lr, (<span class="number">292</span>, <span class="number">0</span>))</span><br><span class="line">img_new.show()</span><br><span class="line">img_new.save(<span class="string">&#x27;表情包paste.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="%E8%A1%A8%E6%83%85%E5%8C%85paste.jpg" class="lazyload placeholder" data-srcset="%E8%A1%A8%E6%83%85%E5%8C%85paste.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="裁剪功能"><a href="#裁剪功能" class="headerlink" title="裁剪功能"></a>裁剪功能</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;表情包.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 裁剪</span></span><br><span class="line"><span class="comment"># 传递参数box(left, upper, right, lower)</span></span><br><span class="line">img_crop = img.crop((<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">img_crop.show()</span><br></pre></td></tr></table></figure></div>

<p><img src="crop.png" class="lazyload placeholder" data-srcset="crop.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p><img src="%E8%A1%A8%E6%83%85%E5%8C%85_crop.png" class="lazyload placeholder" data-srcset="%E8%A1%A8%E6%83%85%E5%8C%85_crop.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="色点和色块"><a href="#色点和色块" class="headerlink" title="色点和色块"></a>色点和色块</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line">img = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, (<span class="number">300</span>, <span class="number">300</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">draw = ImageDraw.Draw(img)</span><br><span class="line"><span class="comment"># 色点</span></span><br><span class="line">draw.point((<span class="number">10</span>, <span class="number">10</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line"><span class="comment"># 色线</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>, <span class="number">100</span>):</span><br><span class="line">    draw.point((l, <span class="number">20</span>), (<span class="number">0</span>, <span class="number">250</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 色块</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">230</span>, <span class="number">280</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">230</span>, <span class="number">280</span>):</span><br><span class="line">        draw.point((i, j), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 渐变色</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">200</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">200</span>):</span><br><span class="line">        draw.point((i, j), (i, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">img.show()</span><br><span class="line">img.save(<span class="string">&#x27;color.png&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="color.png" class="lazyload placeholder" data-srcset="color.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="图片缩放"><a href="#图片缩放" class="headerlink" title="图片缩放"></a>图片缩放</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;表情包.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line">img.show()</span><br><span class="line"><span class="comment"># 等比例缩放，缩放程度较大的自动调整</span></span><br><span class="line">img.thumbnail((<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure></div>

<p><img src="%E8%A1%A8%E6%83%85%E5%8C%85%E7%BC%A9%E6%94%BE.png" class="lazyload placeholder" data-srcset="%E8%A1%A8%E6%83%85%E5%8C%85%E7%BC%A9%E6%94%BE.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
]]></content>
      <categories>
        <category>视觉处理</category>
        <category>Opencv</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Python题目练习01</title>
    <url>/2021/12/18/Python%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A001/</url>
    <content><![CDATA[<h3 id="删除用户输入数字序列中的素数"><a href="#删除用户输入数字序列中的素数" class="headerlink" title="删除用户输入数字序列中的素数"></a><strong>删除用户输入数字序列中的素数</strong></h3><p><strong>题目： 用户输入多个正整数（两个数之间用一个空格间隔），请将其保存到一个列表中，删除其中的素数后按用户的输入顺序输出剩余正整数（两个数之间用一个空格间隔）。</strong></p>
<p><em>Input</em></p>
<p><strong>用户输入多个正整数（两个数之间用一个空格间隔）</strong></p>
<blockquote>
<p>3 2 4 1</p>
</blockquote>
<p><em>Output</em></p>
<p><strong>按用户输入顺序输出非素数序列（两个数之间用一个空格间隔）</strong></p>
<blockquote>
<p> 4 1</p>
</blockquote>
<p><em>Code</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义判断素数函数，返回bool值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,x):</span><br><span class="line">        <span class="keyword">if</span> x%i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">a=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">l=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> prime(i):</span><br><span class="line">        l.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l)):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="built_in">len</span>(l)-<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(l[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(l[i],end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="删除超龄员工"><a href="#删除超龄员工" class="headerlink" title="删除超龄员工"></a>删除超龄员工</h3><p><strong>题目： 用户输入n名员工的信息（姓名，年龄），且姓名不重复，保存到一个字典中，从字典中删除年龄超过60岁的员工，将剩余员工信息按用户的录入顺序输出。</strong></p>
<p><em>Input</em></p>
<p><strong>第一行输入n，代表要输入的员工信息人数 输入n行，每行由员工姓名和年龄构成，两个信息之间用一个空格间隔</strong></p>
<blockquote>
<p>2<br>a 60<br>b 61</p>
</blockquote>
<p><em>Output</em></p>
<p><strong>按用户输入顺序输出年龄不超过60的员工信息，每行输出一位员工信息，姓名和年龄之间用一个空格间隔</strong></p>
<blockquote>
<p>a 60</p>
</blockquote>
<p><em>Code</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">input</span>())):</span><br><span class="line">    s = <span class="built_in">input</span>().split()</span><br><span class="line">    t = (s[<span class="number">0</span>], <span class="built_in">int</span>(s[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">if</span> t[<span class="number">1</span>] &lt;= <span class="number">60</span>:</span><br><span class="line">        l.append(t)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(t[<span class="number">0</span>], t[<span class="number">1</span>], sep=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="按学号升序输出学生信息"><a href="#按学号升序输出学生信息" class="headerlink" title="按学号升序输出学生信息"></a>按学号升序输出学生信息</h3><p><strong>题目： 用户输入n名学生的信息（学号，姓名），学号固定3位由0-9数字构成，不会重复，保存到一个字典中，请按学号由小到大的顺序输出学生的信息。</strong></p>
<p><em>Input</em></p>
<p><strong>第一行输入n，代表要输入的学生信息人数 输入n行，每一行由学生学号和姓名组成，两者之间用一个空格间隔</strong></p>
<blockquote>
<p>2<br>002 a<br>001 b</p>
</blockquote>
<p><em>Output</em></p>
<p><strong>按学号由小到大的顺序输出学生的信息，每一行由学生学号和姓名组成，两者之间用一个空格间隔</strong></p>
<blockquote>
<p>001 b<br>002 a</p>
</blockquote>
<p><em>Code</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">input</span>())):</span><br><span class="line">    s = <span class="built_in">input</span>().split()</span><br><span class="line">    t = (s[<span class="number">0</span>], s[<span class="number">1</span>])</span><br><span class="line">    l.append(t)</span><br><span class="line"><span class="comment"># 选择法排序</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(l)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(l[i][<span class="number">0</span>]) &gt; <span class="built_in">int</span>(l[j][<span class="number">0</span>]):</span><br><span class="line">            l[i], l[j] = l[j], l[i]</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(y[<span class="number">0</span>], y[<span class="number">1</span>], sep=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="删除字符串中的特定字符"><a href="#删除字符串中的特定字符" class="headerlink" title="删除字符串中的特定字符"></a>删除字符串中的特定字符</h3><p><strong>题目： 第一行输入一个字符串，第二行输入要从第一行字符串中删除的字符 c，大小写不区分，第三行输出删除制定字符后的结果。</strong></p>
<p>Input</p>
<p><strong>第一行中输入一行字符串 第二行输入待删除的一个字符</strong></p>
<blockquote>
<p>WINDOw<br>w</p>
</blockquote>
<p><em>Output</em></p>
<p><strong>输出删除制定字符后的结果。</strong></p>
<blockquote>
<p> INDO</p>
</blockquote>
<p><em>Code</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># strip()方法用于移除字符串头尾指定的字符（默认为空格）</span></span><br><span class="line">s1 = <span class="built_in">input</span>().strip()</span><br><span class="line">s2 = <span class="built_in">input</span>().strip()</span><br><span class="line">s1 = s1.replace(s2.upper(), <span class="string">&#x27;&#x27;</span>).replace(s2.lower(), <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure></div>

<h3 id="逆序输出列表元素"><a href="#逆序输出列表元素" class="headerlink" title="逆序输出列表元素"></a><strong>逆序输出列表元素</strong></h3><p><strong>题目： 输入一行n个字符串，逆序输出字符串中的所有元素。</strong></p>
<p><em>Input</em></p>
<blockquote>
<p>ab cd efg</p>
</blockquote>
<p><em>Output</em></p>
<blockquote>
<p> ba dc gfe</p>
</blockquote>
<p><em>Code</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过递归函数实现字符串倒序</span></span><br><span class="line"><span class="comment"># def rvs(s):</span></span><br><span class="line"><span class="comment">#     if s == &quot;&quot;:</span></span><br><span class="line"><span class="comment">#         return s</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         return rvs(s[1:])+s[0]</span></span><br><span class="line"></span><br><span class="line">string = <span class="built_in">input</span>().split()</span><br><span class="line">str_l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="comment"># 字符串切片</span></span><br><span class="line">    a = i[::-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># a = rvs(i)</span></span><br><span class="line">    str_l.append(a)</span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(str_l):</span><br><span class="line">    <span class="keyword">if</span> index + <span class="number">1</span> == <span class="built_in">len</span>(str_l):</span><br><span class="line">        <span class="built_in">print</span>(value, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(value, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>程序设计</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Opencv项目实战:信用卡数字识别</title>
    <url>/2022/01/30/Opencv%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E4%BF%A1%E7%94%A8%E5%8D%A1%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h2 id="Opencv项目实战：信用卡数字识别"><a href="#Opencv项目实战：信用卡数字识别" class="headerlink" title="Opencv项目实战：信用卡数字识别"></a>Opencv项目实战：信用卡数字识别</h2><h3 id="导入库，定义展示函数"><a href="#导入库，定义展示函数" class="headerlink" title="导入库，定义展示函数"></a>导入库，定义展示函数</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> imutils <span class="keyword">import</span> contours</span><br><span class="line"><span class="keyword">import</span> myutils <span class="comment"># 自定义的库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_show</span>(<span class="params">img, name</span>):</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;name&#x27;</span>, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></div>

<h3 id="读取模板图片，进行轮廓检测。"><a href="#读取模板图片，进行轮廓检测。" class="headerlink" title="读取模板图片，进行轮廓检测。"></a>读取模板图片，进行轮廓检测。</h3><p>而轮廓检测<code>cv2.findContours()</code>接收是二值图像，所以先对模板进行灰度和二值处理，由于原图像是白底黑图，所以进行反二值处理为黑底白图。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取数字图片</span></span><br><span class="line">number = cv2.imread(<span class="string">&#x27;./images/ocr_a_reference.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 转换为灰度图片 色彩空间转换</span></span><br><span class="line">number_gray = cv2.cvtColor(number, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 转化为二值图像 图像阈值处理</span></span><br><span class="line"><span class="comment"># 其返回值为两个，【0】表示返回阈值 【1】表示返回图像</span></span><br><span class="line">number_gray = cv2.threshold(number_gray, <span class="number">10</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>

<p>原图：<img src="/number.png" class="lazyload placeholder" data-srcset="/number.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="模板"></p>
<p>转化后：<img src="/number_gray.png" class="lazyload placeholder" data-srcset="/number_gray.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="二值处理"></p>
<h3 id="轮廓检测：外轮廓，并绘出轮廓"><a href="#轮廓检测：外轮廓，并绘出轮廓" class="headerlink" title="轮廓检测：外轮廓，并绘出轮廓"></a>轮廓检测：外轮廓，并绘出轮廓</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 轮廓检测 外轮廓</span></span><br><span class="line"><span class="comment"># 新版本opencv只有两个返回值，分别是轮廓和轮廓的层次信息</span></span><br><span class="line">refCnts, hierarchy = cv2.findContours(number_gray.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="comment"># 绘制轮廓</span></span><br><span class="line"><span class="comment"># 参数：图像，轮廓，边缘索引，颜色，厚度</span></span><br><span class="line">cv2.drawContours(number, refCnts, -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)  <span class="comment"># -1表示绘出所有轮廓</span></span><br></pre></td></tr></table></figure></div>

<p><img src="/number_contours.png" class="lazyload placeholder" data-srcset="/number_contours.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="轮廓检测"></p>
<h3 id="应用自定义库myutils对绘出的轮廓进行排序"><a href="#应用自定义库myutils对绘出的轮廓进行排序" class="headerlink" title="应用自定义库myutils对绘出的轮廓进行排序"></a>应用自定义库<code>myutils</code>对绘出的轮廓进行排序</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_contours</span>(<span class="params">cnts, method=<span class="string">&quot;left-to-right&quot;</span></span>):</span></span><br><span class="line">    reverse = <span class="literal">False</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;right-to-left&quot;</span> <span class="keyword">or</span> method == <span class="string">&quot;bottom-to-top&quot;</span>:</span><br><span class="line">        reverse = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;top-to-bottom&quot;</span> <span class="keyword">or</span> method == <span class="string">&quot;bottom-to-top&quot;</span>:</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 用一个最小的矩形，把找到的形状包起来x,y,h,w对外接矩形取左上点的横坐标，通过对横坐标的排序即可实现对数字的排序</span></span><br><span class="line">    <span class="comment"># boundingBoxes是一个由元组构成的列表，其中每个元组包含x、y、h、w四个值</span></span><br><span class="line">    boundingBoxes = [cv2.boundingRect(c) <span class="keyword">for</span> c <span class="keyword">in</span> cnts]  </span><br><span class="line">	<span class="comment"># zip[iterable,...]函数返回一个以元组为元素的列表,zip()和*操作符一起操作可以用来unzip(分解)一个列表为多个元组</span></span><br><span class="line">    <span class="comment"># zip(cnts, boundingBoxes),key=lambda b: b[1][i], reverse=reverse)这里首先将cnts, boundingBoxes合成</span></span><br><span class="line">    <span class="comment"># 为(cnts, (x, y, w, h))又根据自定义函数lambada函数提取b[1]=(x, y, w, h)根据i值确定x，y值排序，最后zip(*)拆分</span></span><br><span class="line">    <span class="comment"># 返回cnts和boundingBoxes值</span></span><br><span class="line">    (cnts, boundingBoxes) = <span class="built_in">zip</span>(*<span class="built_in">sorted</span>(<span class="built_in">zip</span>(cnts, boundingBoxes)</span><br><span class="line">                                        key=<span class="keyword">lambda</span> b: b[<span class="number">1</span>][i], reverse=reverse))  <span class="comment"># 使用其X进行判断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnts, boundingBoxes  <span class="comment"># 返回值为排序完的轮廓</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序从左到右，从上到下,根据method，则轮廓为根据x值升序进行排序</span></span><br><span class="line">refCnts = myutils.sort_contours(refCnts, method=<span class="string">&quot;left-to-right&quot;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></div>

<p>定义一个空字典进行模板匹配</p>
<p><code>digits=&#123;&#125;</code></p>
<h3 id="对轮廓进行遍历"><a href="#对轮廓进行遍历" class="headerlink" title="对轮廓进行遍历"></a>对轮廓进行遍历</h3><p>得到(x, y, w, h)值做外接矩形，并将外接矩形轮廓加入到字典中，其字典的<code>key</code>就是轮廓所代表的值</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 遍历每一个轮廓</span></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(refCnts):</span><br><span class="line">    <span class="comment"># 计算外界矩形并relize的合适大小</span></span><br><span class="line">    (x, y, w, h) = cv2.boundingRect(c)</span><br><span class="line">    roi = number_gray[y: y+h, x: x+w]</span><br><span class="line">    roi = cv2.resize(roi, [<span class="number">57</span>, <span class="number">88</span>])</span><br><span class="line">    <span class="comment"># 每一个数字对应一个模板</span></span><br><span class="line">    digits[i] = roi</span><br></pre></td></tr></table></figure></div>

<p>定义形态学操作所需要的卷积核</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化卷积核</span></span><br><span class="line">ntKernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line">ffKernel = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="number">5</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure></div>

<h3 id="读取信用卡图片"><a href="#读取信用卡图片" class="headerlink" title="读取信用卡图片"></a>读取信用卡图片</h3><p>引用<code>myutils</code>中的函数缩小尺寸，并进行灰度处理</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize</span>(<span class="params">image, width=<span class="literal">None</span>, height=<span class="literal">None</span>, inter=cv2.INTER_AREA</span>):</span></span><br><span class="line">    dim = <span class="literal">None</span></span><br><span class="line">    (h, w) = image.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> width <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> height <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    <span class="keyword">if</span> width <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        r = height / <span class="built_in">float</span>(h)</span><br><span class="line">        dim = (<span class="built_in">int</span>(w * r), height)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = width / <span class="built_in">float</span>(w)</span><br><span class="line">        dim = (width, <span class="built_in">int</span>(h * r))</span><br><span class="line">    resized = cv2.resize(image, dim, interpolation=inter)</span><br><span class="line">    <span class="keyword">return</span> resized</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取信用卡图像</span></span><br><span class="line">card_01 = cv2.imread(<span class="string">&#x27;./images/credit_card_01.png&#x27;</span>)</span><br><span class="line">card_01 = myutils.resize(card_01, width=<span class="number">300</span>)</span><br><span class="line">card_01_gray = cv2.cvtColor(card_01, cv2.COLOR_BGR2GRAY)</span><br></pre></td></tr></table></figure></div>

<p><img src="/card_01.png" class="lazyload placeholder" data-srcset="/card_01.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="card_01"></p>
<h3 id="礼帽操作"><a href="#礼帽操作" class="headerlink" title="礼帽操作"></a>礼帽操作</h3><p>对图像进行礼帽操作(原始图像-(开运算结果(先腐蚀后膨胀))），作用：获得图像的噪声信息或者比原始图像边缘更亮的边缘部分。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 礼帽操作 突出更明亮的区域（白色部分）</span></span><br><span class="line">card_tophat = cv2.morphologyEx(card_01_gray, cv2.MORPH_TOPHAT, ntKernel)</span><br></pre></td></tr></table></figure></div>

<p><img src="/card_tophat.png" class="lazyload placeholder" data-srcset="/card_tophat.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="礼帽操作"></p>
<h3 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a>Sobel算子</h3><p>进行Sobel算子进行梯度运算，对噪声具有平滑作用，能很好的消除噪声的影响。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">gradX = cv2.Sobel(card_tophat, ddepth=cv2.CV_32F, dx=<span class="number">1</span>, dy=<span class="number">0</span>, ksize=-<span class="number">1</span>)</span><br><span class="line">gradX = np.absolute(gradX)  <span class="comment"># 绝对值</span></span><br><span class="line"><span class="comment"># 将边界归一化处理，看的更清楚</span></span><br><span class="line">minVal, maxVal = np.<span class="built_in">min</span>(gradX), np.<span class="built_in">max</span>(gradX)</span><br><span class="line">gradX = <span class="number">255</span> * (gradX - minVal) / (maxVal - minVal)</span><br><span class="line"><span class="comment">#转化为8位无符号数</span></span><br><span class="line">gradX = gradX.astype(<span class="string">&#x27;uint8&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="/card_sobel.png" class="lazyload placeholder" data-srcset="/card_sobel.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="sobel算子"></p>
<h3 id="闭操作"><a href="#闭操作" class="headerlink" title="闭操作"></a>闭操作</h3><p>进行闭操作（先膨胀在腐蚀），可以填充白色物体内细小黑色空洞的区域、连接临近物体</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 填充白色区域内细小黑色空洞的区域， 将数字连在一起，形成白色块状</span></span><br><span class="line">gradX = cv2.morphologyEx(gradX, cv2.MORPH_CLOSE, ntKernel)</span><br></pre></td></tr></table></figure></div>

<p><img src="/card_close_1.png" class="lazyload placeholder" data-srcset="/card_close_1.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220130205027168"></p>
<h3 id="二值化处理"><a href="#二值化处理" class="headerlink" title="二值化处理"></a>二值化处理</h3><p>二值化处理，将两种主题明显分隔开，用<code>THRESH_OTSU</code>自动做判断</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># THRESH_OTSU自动寻找合适的阈值， 需把阈值参数设置为0</span></span><br><span class="line">thresh = cv2.threshold(gradX, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>

<p><img src="/card_gradx.png" class="lazyload placeholder" data-srcset="/card_gradx.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="闭操作-1"><a href="#闭操作-1" class="headerlink" title="闭操作"></a>闭操作</h3><p>图像中白色块内有出先黑色空洞，再次使用闭操作填充黑色空洞部分</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在执行一个闭操作，白色填充黑色区域</span></span><br><span class="line">gradX = cv2.morphologyEx(gradX, cv2.MORPH_CLOSE, ffKernel)</span><br><span class="line">img_show(gradX, <span class="string">&quot;gradx&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="/card_close_2.png" class="lazyload placeholder" data-srcset="/card_close_2.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220130205558903"></p>
<h3 id="轮廓检测，-绘制轮廓"><a href="#轮廓检测，-绘制轮廓" class="headerlink" title="轮廓检测， 绘制轮廓"></a>轮廓检测， 绘制轮廓</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制轮廓</span></span><br><span class="line">threshCnts, hierarchy = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">cnts = threshCnts</span><br><span class="line">cur_img = card_01.copy()</span><br><span class="line">cv2.drawContours(cur_img, cnts, -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="/card_drawCon.png" class="lazyload placeholder" data-srcset="/card_drawCon.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="绘制轮廓"></p>
<h3 id="过滤轮廓"><a href="#过滤轮廓" class="headerlink" title="过滤轮廓"></a>过滤轮廓</h3><p>选出需要的4个数字轮廓，并定义空列表添加所需轮廓</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">locs = []</span><br><span class="line"><span class="comment"># 遍历轮廓</span></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(cnts):</span><br><span class="line">    <span class="comment"># 计算矩形</span></span><br><span class="line">    (x, y, w, h) = cv2.boundingRect(c)</span><br><span class="line">    ar = w / <span class="built_in">float</span>(h)</span><br><span class="line">    <span class="comment"># 通过计算长宽比例，把符合的留下来</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">2.5</span> &lt; ar &lt; <span class="number">4.0</span>:</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">40</span> &lt; w &lt; <span class="number">55</span>) <span class="keyword">and</span> (<span class="number">10</span> &lt; h &lt; <span class="number">20</span>):</span><br><span class="line">            locs.append((x, y, w, h))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(locs))  <span class="comment"># 数量为4</span></span><br><span class="line"><span class="comment"># 通过轮廓的x值从左到右排序(升序)</span></span><br><span class="line">locs = <span class="built_in">sorted</span>(locs, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]) </span><br></pre></td></tr></table></figure></div>

<h3 id="得到每一个轮廓"><a href="#得到每一个轮廓" class="headerlink" title="得到每一个轮廓"></a>得到每一个轮廓</h3><p>先定义一个空列表<code>output = []</code>储存信用卡的数字</p>
<p>遍历<code>locs</code>列表里4个轮廓的每一个轮廓，对每一个轮廓的图像进行，轮廓检测与排序，从而的每一个轮廓中每一个数字的轮廓</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i, (gx, gy, gw, gh)) <span class="keyword">in</span> <span class="built_in">enumerate</span>(locs):</span><br><span class="line">    group_out = []</span><br><span class="line">    <span class="comment"># 往外扩展</span></span><br><span class="line">    group = card_01_gray[gy - <span class="number">5</span>: gy + gh + <span class="number">5</span>, gx - <span class="number">5</span>: gx + gw + <span class="number">5</span>]</span><br><span class="line">    <span class="comment"># img_show(group, &#x27;group&#x27;)</span></span><br><span class="line">    <span class="comment"># 轮廓检测找到每一个小轮廓</span></span><br><span class="line">    group = cv2.threshold(group, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 得到每一个数字的轮廓</span></span><br><span class="line">    digitCnts, hierarchy = cv2.findContours(group.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">    <span class="comment"># 排序从左到右</span></span><br><span class="line">    digitCnts = contours.sort_contours(digitCnts, method=<span class="string">&quot;left to right&quot;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></div>

<p>阈值处理得到的每一个轮廓图像</p>
<p><img src="/con_1.png" class="lazyload placeholder" data-srcset="/con_1.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="4000"><img src="/con_2.png" class="lazyload placeholder" data-srcset="/con_2.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="1234"><img src="/con_3.png" class="lazyload placeholder" data-srcset="/con_3.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="5678"><img src="/con_4.png" class="lazyload placeholder" data-srcset="/con_4.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="9010"></p>
<h3 id="得到每一个数字"><a href="#得到每一个数字" class="headerlink" title="得到每一个数字"></a>得到每一个数字</h3><p> 遍历每一个轮廓中的数字</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i, (gx, gy, gw, gh)) <span class="keyword">in</span> <span class="built_in">enumerate</span>(locs):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">	<span class="keyword">for</span> c <span class="keyword">in</span> digitCnts:</span><br><span class="line">        <span class="comment"># 得到每一个数字的轮廓值</span></span><br><span class="line">        (x, y, w, h) = cv2.boundingRect(c)</span><br><span class="line">        <span class="comment"># 提取每个数字图像</span></span><br><span class="line">        roi = group[y:y + h, x:x + w]</span><br><span class="line">        roi = cv2.resize(roi, (<span class="number">57</span>, <span class="number">88</span>))  <span class="comment"># 获得每个数字的轮廓并将其resize为和模板一样大小的图片以便于模式匹配</span></span><br></pre></td></tr></table></figure></div>

<h3 id="模板匹配"><a href="#模板匹配" class="headerlink" title="模板匹配"></a>模板匹配</h3><p>将信用卡得到的数字图像与模板数字图像进行模板匹配</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i, (gx, gy, gw, gh)) <span class="keyword">in</span> <span class="built_in">enumerate</span>(locs):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">	<span class="keyword">for</span> c <span class="keyword">in</span> digitCnts:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    	<span class="comment"># 计算匹配得分</span></span><br><span class="line">        scores = []</span><br><span class="line">        <span class="comment"># 在匹配中计算每一个得分</span></span><br><span class="line">        <span class="keyword">for</span> (digit, digitROI) <span class="keyword">in</span> digits.items():</span><br><span class="line">            <span class="comment"># 模板匹配, 得到匹配程度</span></span><br><span class="line">            result = cv2.matchTemplate(roi, digitROI, cv2.TM_CCOEFF)</span><br><span class="line">            <span class="comment"># 取最大值为完全匹配</span></span><br><span class="line">            <span class="comment"># (minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(result)</span></span><br><span class="line">            (_, score, _, _) = cv2.minMaxLoc(result)</span><br><span class="line">            <span class="comment"># 每一个轮廓匹配的最大值加入scores列表</span></span><br><span class="line">            scores.append(score)</span><br><span class="line">		<span class="comment"># np.argmax(a)这个函数是返回a中最大值的索引</span></span><br><span class="line">        group_out.append(<span class="built_in">str</span>(np.argmax(scores)))</span><br><span class="line">    cv2.rectangle(card_01, (gx - <span class="number">5</span>, gy - <span class="number">5</span>), (gx + gw + <span class="number">5</span>, gy + gh + <span class="number">5</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># &quot;str&quot;.join(item) str表示字符串（字符），item表示一个成员，注意括号里必须只能有一个成员</span></span><br><span class="line">    <span class="comment"># 得到item的每一个成员以str字符分隔在拼成一个字符串</span></span><br><span class="line">    cv2.putText(card_01, <span class="string">&quot;&quot;</span>.join(group_out), (gx, gy - <span class="number">15</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.65</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 得到结果</span></span><br><span class="line">    output.extend(group_out)</span><br></pre></td></tr></table></figure></div>

<p>这里由于<code>result</code>是与模板里的数字轮廓相匹配的程度，而其模板图片中轮廓所代表的值与scores的索引相同，顺序都为【0-9】，转换为字符即为正确数字。然后绘出矩形和数字在图像中即可完成。</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>最后打印输出结果。</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Card number :&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&quot;&quot;</span>.join(output)))</span><br><span class="line">img_show(card_01, <span class="string">&#x27;card_01&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p><img src="/card_01_succes.png" class="lazyload placeholder" data-srcset="/card_01_succes.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="result"><code>输出: Card number :4000123456789010</code></p>
<p>others：</p>
<p><img src="/card_02.png" class="lazyload placeholder" data-srcset="/card_02.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="card_02"><img src="/card_03.png" class="lazyload placeholder" data-srcset="/card_03.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="card_03"><img src="/card_04.png" class="lazyload placeholder" data-srcset="/card_04.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="card_04"></p>
]]></content>
      <categories>
        <category>视觉处理</category>
        <category>Opencv</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的输入与输出</title>
    <url>/2021/11/14/Python%E7%9A%84%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<p>相比于C语言，python的输入输出更加多样化。下面对python的输入输出进行简单的总结。</p>
<span id="more"></span>

<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><h3 id="单行的输入"><a href="#单行的输入" class="headerlink" title="单行的输入"></a>单行的输入</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()<span class="comment"># 字符串</span></span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>())<span class="comment"># 将字符串强制转换为整型</span></span><br><span class="line">c = <span class="built_in">float</span>(<span class="built_in">input</span>())<span class="comment"># 将字符串强制转换为浮点型</span></span><br></pre></td></tr></table></figure></div>

<h3 id="连续输入指定数值并赋值"><a href="#连续输入指定数值并赋值" class="headerlink" title="连续输入指定数值并赋值"></a>连续输入指定数值并赋值</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="built_in">input</span>().split()<span class="comment"># 字符串</span></span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">-------------------------------- </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">a</span>, <span class="title">b</span> = <span class="title">map</span>(<span class="params"><span class="built_in">int</span>,<span class="built_in">input</span>(<span class="params"></span>).split(<span class="params"></span>)</span>)# 整型</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">a, b</span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params"><span class="built_in">type</span>(<span class="params">a</span>)</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 运行结果</span></span><br><span class="line"><span class="class">1 2</span></span><br><span class="line"><span class="class">1 2</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure></div>

<h3 id="将输入的数据存为一个列表"><a href="#将输入的数据存为一个列表" class="headerlink" title="将输入的数据存为一个列表"></a>将输入的数据存为一个列表</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">input</span>().split()<span class="comment"># 列表数值为字符串</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> a</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">-------------------------------- </span></span><br><span class="line"><span class="class"># 列表数值为整型</span></span><br><span class="line"><span class="class"># 第一种</span></span><br><span class="line"><span class="class"><span class="title">a</span> = <span class="title">list</span>(<span class="params"><span class="built_in">map</span>(<span class="params"><span class="built_in">int</span>,<span class="built_in">input</span>(<span class="params"></span>).split(<span class="params"></span>)</span>)</span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params"><span class="built_in">type</span>(<span class="params">a</span>)</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 运行结果</span></span><br><span class="line"><span class="class">1 2 3 4 5</span></span><br><span class="line"><span class="class">[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"># 第二种</span></span><br><span class="line"><span class="class"><span class="title">a</span> = [<span class="title">int</span>(<span class="params">i</span>) <span class="title">for</span> <span class="title">i</span> <span class="title">in</span> <span class="title">input</span>().<span class="title">split</span>()]</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params"><span class="built_in">type</span>(<span class="params">a</span>)</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#运行结果</span></span><br><span class="line"><span class="class">1 2 3 4 5</span></span><br><span class="line"><span class="class">[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><h3 id="直接输出"><a href="#直接输出" class="headerlink" title="直接输出"></a>直接输出</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">30</span></span><br><span class="line">b = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">c = <span class="number">3.14</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">30</span> a <span class="number">3.14</span></span><br></pre></td></tr></table></figure></div>

<h3 id="占位符（格式化输出）"><a href="#占位符（格式化输出）" class="headerlink" title="占位符（格式化输出）"></a>占位符（格式化输出）</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;Xiaoming&#x27;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My name is %s, my age is %s&#x27;</span> % (name, age)) <span class="comment"># %s(针对所有数据类型)</span></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">My name <span class="keyword">is</span> Xiaoming, my age <span class="keyword">is</span> <span class="number">18</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">weight = <span class="number">50.2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my weight is %f kg&quot;</span> % weight)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my weight is %5.2f kg&quot;</span> % weight)<span class="comment"># 占5个字符，保留2位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my age is %d&#x27;</span> % age)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my age is %5d&#x27;</span> % age)<span class="comment"># 占5个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">my weight <span class="keyword">is</span> <span class="number">50.200000</span> kg</span><br><span class="line">my weight <span class="keyword">is</span> <span class="number">50.20</span> kg</span><br><span class="line">my age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line">my age <span class="keyword">is</span>    <span class="number">18</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></div>

<h3 id="format格式化输出"><a href="#format格式化输出" class="headerlink" title="format格式化输出"></a>format格式化输出</h3><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;Xiaoming&#x27;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello,&#123;&#125;,you are &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name,age))</span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">hello,Xiaoming,you are <span class="number">18</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">name = <span class="string">&#x27;Xiaoming&#x27;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello,&#123;1&#125;,you are &#123;0&#125;-&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(age,name))<span class="comment">#索引是根据format后的数据进行的哦</span></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">hello,Xiaoming,you are <span class="number">18</span>-<span class="number">18</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">name = <span class="string">&#x27;Xiaoming&#x27;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello,&#123;name&#125;,you are &#123;age&#125;&quot;</span>.<span class="built_in">format</span>(age=age, name=name))</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">hello,Xiaoming,you are <span class="number">18</span></span><br></pre></td></tr></table></figure></div>

<h4 id="format把float、int等数字字符串化设置对齐方式、宽度、保留几位"><a href="#format把float、int等数字字符串化设置对齐方式、宽度、保留几位" class="headerlink" title="format把float、int等数字字符串化设置对齐方式、宽度、保留几位"></a>format把float、int等数字字符串化设置对齐方式、宽度、保留几位</h4><p><a href="https://blog.csdn.net/dugushangliang/article/details/89884591">转载自独孤尚良dugushangliang</a></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float占8位留2位小数：&#123;:8.2f&#125;——默认右对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192.68123</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float占18位留2位小数：&#123;:18.2f&#125;——默认右对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192.68123</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float占18位留2位小数：&#123;:&gt;18.2f&#125;——右对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192.68123</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float占18位留2位小数：&#123;:&lt;18.2f&#125;——左对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192.68123</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float占18位留2位小数：&#123;:^18.2f&#125;——居中对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192.68123</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float留2位小数：&#123;:.2f&#125;——默认右对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192.68123</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float留2位小数：&#123;:&gt;.2f&#125;——右对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192.68123</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float留2位小数：&#123;:&lt;.2f&#125;——左对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192.68123</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float留2位小数：&#123;:&lt;+.2f&#125;——左对齐带符号&quot;</span>.<span class="built_in">format</span>(<span class="number">1192.68123</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float留2位小数：&#123;:&lt;.2%&#125;——左对齐百分比形式&quot;</span>.<span class="built_in">format</span>(<span class="number">0.6812345</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int占8位：&#123;:&lt;8d&#125;——左对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int占8位：&#123;:0&lt;8d&#125;——左对齐补0&quot;</span>.<span class="built_in">format</span>(<span class="number">1192</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int占8位：&#123;:x&lt;8d&#125;——左对齐补x&quot;</span>.<span class="built_in">format</span>(<span class="number">1192</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int占8位：&#123;:中&lt;8d&#125;——左对齐补中&quot;</span>.<span class="built_in">format</span>(<span class="number">1192</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int占8位：&#123;:8d&#125;——默认右对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int占8位：&#123;:8d&#125;——默认右对齐&quot;</span>.<span class="built_in">format</span>(<span class="number">1192</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int占22位：&#123;:22e&#125;——默认右对齐科学计数法&quot;</span>.<span class="built_in">format</span>(<span class="number">1230000</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int占22位：&#123;:22,&#125;——默认右对齐逗号分隔数字&quot;</span>.<span class="built_in">format</span>(<span class="number">1230000</span>))</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="built_in">float</span>占<span class="number">8</span>位留<span class="number">2</span>位小数： <span class="number">1192.68</span>——默认右对齐</span><br><span class="line"><span class="built_in">float</span>占<span class="number">18</span>位留<span class="number">2</span>位小数：           <span class="number">1192.68</span>——默认右对齐</span><br><span class="line"><span class="built_in">float</span>占<span class="number">18</span>位留<span class="number">2</span>位小数：           <span class="number">1192.68</span>——右对齐</span><br><span class="line"><span class="built_in">float</span>占<span class="number">18</span>位留<span class="number">2</span>位小数：<span class="number">1192.68</span>           ——左对齐</span><br><span class="line"><span class="built_in">float</span>占<span class="number">18</span>位留<span class="number">2</span>位小数：     <span class="number">1192.68</span>      ——居中对齐</span><br><span class="line"><span class="built_in">float</span>留<span class="number">2</span>位小数：<span class="number">1192.68</span>——默认右对齐</span><br><span class="line"><span class="built_in">float</span>留<span class="number">2</span>位小数：<span class="number">1192.68</span>——右对齐</span><br><span class="line"><span class="built_in">float</span>留<span class="number">2</span>位小数：<span class="number">1192.68</span>——左对齐</span><br><span class="line"><span class="built_in">float</span>留<span class="number">2</span>位小数：+<span class="number">1192.68</span>——左对齐带符号</span><br><span class="line"><span class="built_in">float</span>留<span class="number">2</span>位小数：<span class="number">68.12</span>%——左对齐百分比形式</span><br><span class="line"><span class="built_in">int</span>占<span class="number">8</span>位：<span class="number">1192</span>    ——左对齐</span><br><span class="line"><span class="built_in">int</span>占<span class="number">8</span>位：<span class="number">11920000</span>——左对齐补<span class="number">0</span></span><br><span class="line"><span class="built_in">int</span>占<span class="number">8</span>位：1192xxxx——左对齐补x</span><br><span class="line"><span class="built_in">int</span>占<span class="number">8</span>位：<span class="number">1192</span>中中中中——左对齐补中</span><br><span class="line"><span class="built_in">int</span>占<span class="number">8</span>位：    <span class="number">1192</span>——默认右对齐</span><br><span class="line"><span class="built_in">int</span>占<span class="number">8</span>位：    <span class="number">1192</span>——默认右对齐</span><br><span class="line"><span class="built_in">int</span>占<span class="number">22</span>位：          <span class="number">1.230000e+06</span>——默认右对齐科学计数法</span><br><span class="line"><span class="built_in">int</span>占<span class="number">22</span>位：             <span class="number">1</span>,<span class="number">230</span>,<span class="number">000</span>——默认右对齐逗号分隔数字</span><br></pre></td></tr></table></figure></div>

<h3 id="f-String格式化（第三种格式化输出）"><a href="#f-String格式化（第三种格式化输出）" class="headerlink" title="f-String格式化（第三种格式化输出）"></a>f-String格式化（第三种格式化输出）</h3><p>比较简单，实用，f 或者 F都可以哦 ，让字符和数字能够直接相加</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">age = <span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hello,<span class="subst">&#123;name&#125;</span>,you are <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">hello,python,you are <span class="number">30</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">age = <span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">F&quot;hello,<span class="subst">&#123;name&#125;</span>,you are <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line">输出：</span><br><span class="line">hello,python,you are <span class="number">30</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">age = <span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">F&quot;<span class="subst">&#123;age * <span class="number">2</span>&#125;</span>&quot;</span>)</span><br><span class="line">输出：</span><br><span class="line"><span class="number">60</span></span><br></pre></td></tr></table></figure></div>

<p><a href="https://www.cnblogs.com/SkyOceanchen/p/11276921.html">转载于</a></p>
]]></content>
      <categories>
        <category>程序设计</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python题目练习02</title>
    <url>/2021/12/22/Python%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A002/</url>
    <content><![CDATA[<h3 id="递归求斐波那契数列"><a href="#递归求斐波那契数列" class="headerlink" title="递归求斐波那契数列"></a>递归求斐波那契数列</h3><p><strong>题目：斐波那契数列的排列是：0，1，1，2，3，5，8，13，21，34，55，89，144……，即从第三个数开始，每个数等于前面两个数的和。</strong></p>
<p><em>Input</em></p>
<p><strong>输入一个正整数n（n代表斐波那契数列中的第n个位置）。</strong></p>
<blockquote>
<p>4</p>
</blockquote>
<p><em>Output</em></p>
<p><strong>输出斐波那契数列第n个位置的值。</strong></p>
<blockquote>
<p>2</p>
</blockquote>
<p><em>Code</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">i</span>):</span></span><br><span class="line">    num_list = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> num_list[i]</span><br><span class="line">    <span class="keyword">elif</span> i &gt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci(i - <span class="number">2</span>) + fibonacci(i - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(fibonacci(num-<span class="number">1</span>))</span><br></pre></td></tr></table></figure></div>

<h3 id="用递归求最大公约数"><a href="#用递归求最大公约数" class="headerlink" title="用递归求最大公约数"></a>用递归求最大公约数</h3><p><strong>题目：计算两个正整数的最大公约数。提示：如果p&gt;q，则p和q的最大公约数等于q和p%q的最大公约数。</strong></p>
<p><img src="%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E7%AE%97%E6%B3%95.png" class="lazyload placeholder" data-srcset="%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E7%AE%97%E6%B3%95.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p><em>Input</em></p>
<p><strong>输入一行，由两个正整数组成，中间用一个空格间隔。</strong></p>
<blockquote>
<p>6 8</p>
</blockquote>
<p><em>Output</em></p>
<p><strong>输出最大公约数。</strong></p>
<blockquote>
<p>2</p>
</blockquote>
<p><em>Code</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisor</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> b != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> a &gt; b:</span><br><span class="line">            big, small = b, a % b</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            big, small = a, b % a</span><br><span class="line">        <span class="keyword">return</span> divisor(big, small)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1, num2 = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(divisor(num1, num2))</span><br></pre></td></tr></table></figure></div>

<h3 id="搬运工问题"><a href="#搬运工问题" class="headerlink" title="搬运工问题"></a>搬运工问题</h3><p><strong>题目：一位搬运工需要搬运m件家具，第一天搬运的家具是m件家具的一半多1件，第二天搬运的家具是第一天剩余家具的一半多1件，以后每天都是搬运剩余家具的一半多1件，第n天早上剩余的家具只有1件，求m。</strong></p>
<p><em>Input</em></p>
<p><strong>输入天数n</strong></p>
<blockquote>
<p>7</p>
</blockquote>
<p><em>Output</em></p>
<p><strong>输出m</strong></p>
<blockquote>
<p>190</p>
</blockquote>
<p><em>Code</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_all</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num = num_all(n - <span class="number">1</span>)</span><br><span class="line">        m = (num + <span class="number">1</span>) * <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(num_all(a - <span class="number">1</span>))</span><br></pre></td></tr></table></figure></div>

<h3 id="计算单利和复利"><a href="#计算单利和复利" class="headerlink" title="计算单利和复利"></a><strong>计算单利和复利</strong></h3><p><strong>题目：根据本金a、年利率b、存款年限c，按单利和复利两种方式分别计算存款到期后应得到的利息（四舍五入，保留1位小数）。 提示：单利计算方式为：a * b * c 复利计算方式为：a * (1 + b)<em>c</em> - a 要求：设计单利计算函数，复利计算函数。</strong></p>
<p><em>Input</em></p>
<p><strong>一行输入a，b，c三个值，两两之间用一个空格间隔。</strong></p>
<blockquote>
<p>1000 0.06 3</p>
</blockquote>
<p><em>Output</em></p>
<p><strong>输出单利利息 输出复利利息</strong></p>
<blockquote>
<p>180.0</p>
<p>191.0</p>
</blockquote>
<p><em>Code</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split())</span><br><span class="line">s1 = <span class="built_in">round</span>(a * b * c, <span class="number">1</span>)</span><br><span class="line">s2 = <span class="built_in">round</span>(a * (<span class="number">1</span> + b) ** c - a, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure></div>

<h3 id="递归求n项分数和"><a href="#递归求n项分数和" class="headerlink" title="递归求n项分数和"></a><strong>递归求n项分数和</strong></h3><p><strong>题目: 1/(1x2)-1/(2x3)+1/(3x4)-1/(4x5)+……</strong></p>
<p><em>Input</em></p>
<p><strong>用户输入n值（n是大于0的自然数）</strong></p>
<blockquote>
<p>2</p>
</blockquote>
<p><em>Output</em></p>
<p><strong>显示累加和</strong></p>
<blockquote>
<p>0.33333333333333337</p>
</blockquote>
<p><em>Code</em></p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">n_sum</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (-<span class="number">1</span>) ** (n + <span class="number">1</span>)/(n * (n + <span class="number">1</span>)) + n_sum(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(n_sum(c))</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>程序设计</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS安装:rosdep初始化失败</title>
    <url>/2021/12/04/ROS%E5%AE%89%E8%A3%85-rosdep%E5%88%9D%E5%A7%8B%E5%8C%96%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>ROS版本: Melodic</p>
<p><a href="https://blog.csdn.net/weixin_38650871/article/details/120781651">解决方法</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>VMware</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32蓝牙小车一</title>
    <url>/2021/11/14/STM32%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6%E4%B8%80/</url>
    <content><![CDATA[<h1 id="STM32基础项目：基于stm32f1的蓝牙遥控小车（一）"><a href="#STM32基础项目：基于stm32f1的蓝牙遥控小车（一）" class="headerlink" title="STM32基础项目：基于stm32f1的蓝牙遥控小车（一）"></a>STM32基础项目：基于stm32f1的蓝牙遥控小车（一）</h1><span id="more"></span>

<h3 id="元件准备"><a href="#元件准备" class="headerlink" title="元件准备"></a>元件准备</h3><ol>
<li>STM32F103C8T6核心板</li>
</ol>
<img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008222750464.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008222750464.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="STM32F103C8T6核心板" title="在这里输入图片标题" style="zoom: 67%;" />

<ol start="2">
<li>蓝牙串口模块 JDY-31</li>
</ol>
<img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008222833390.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008222833390.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="输入图片说明" title="在这里输入图片标题" style="zoom:67%;" />

<ol start="3">
<li><p>2WD智能小车底盘套件（包含小车底盘、两个直流电机和橡胶轮）</p>
<img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008223222256.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008223222256.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="输入图片说明" title="在这里输入图片标题" style="zoom:67%;" /></li>
<li><p>L298N电机驱动板模块 </p>
<img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008223358782.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008223358782.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="输入图片说明" title="在这里输入图片标题" style="zoom:67%;" /></li>
<li><p>12v锂电池18650锂电池</p>
<img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008223801067.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008223801067.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="输入图片说明" title="在这里输入图片标题" style="zoom:67%;" /></li>
<li><p>LM2596S DC-DC可调降压模块</p>
<img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008223947022.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211008223947022.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="输入图片说明" title="在这里输入图片标题" style="zoom:67%;" /></li>
<li><p>若干杜邦线</p>
</li>
</ol>
<h3 id="模块的使用"><a href="#模块的使用" class="headerlink" title="模块的使用"></a>模块的使用</h3><h4 id="L298N的使用"><a href="#L298N的使用" class="headerlink" title="L298N的使用"></a>L298N的使用</h4><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009104606216.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009104606216.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="输入图片说明" title="在这里输入图片标题" style="zoom: 33%;" />

<p>由于一般的控制芯片起到控制作用，但是驱动能力不强，而电机所需要的电流一般比较大，控制芯片的IO口不能提供大电流，所以一般不<br>能直接驱动电机。L298是驱动芯片，可以将控制芯片的输出转换成较高的电压和能够输出较大的电流，是比较常用的电机驱动芯片。</p>
<p><strong>使用方法：</strong><br>输出A：通道A输出，连接直流电机<br>输出B:通道B输出，连接直流电机<br>12V供电：主电源正极输入<br>GND：主电源正负极输入<br>5V输出：5V电压输出端，可用于给STM32开发板进行供电<br>ENA:通道A使能<br>ENB:通道B使能<br>IN1—IN4：逻辑输入IN1-IN2接单片机IO口控制通道A，逻辑输入IN3-IN4接单片机IO口控制通道B<br>（靠近ENA的两个引脚为IN1，IN2；同理靠近ENB的两个引脚为IN3，IN4）</p>
<h4 id="LM2596S-DC-DC可调降压模块的使用"><a href="#LM2596S-DC-DC可调降压模块的使用" class="headerlink" title="LM2596S DC-DC可调降压模块的使用"></a>LM2596S DC-DC可调降压模块的使用</h4><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009103358957.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009103358957.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="![输入图片说明](https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009110653822.png &quot;在这里输入图片标题&quot;)" title="在这里输入图片标题" style="zoom: 33%;" />

<p><strong>引脚定义</strong><br>IN+：输入正极，接12v锂电池电源正极<br>IN-:   输入负极，接12v锂电池电源负极<br>OUT+：输出正极，引出杜邦线接单片机Vcc<br>OUT-：输出负极，引出杜邦线接单片机GND<br><strong>使用说明：</strong></p>
<p>①接入电源（3-40V），电源指示灯亮，模块正常工作<br>②调整蓝色电位器旋钮（一般顺时针旋转升压逆时针降压）并用万用表检测输出电压达到所需电压为止</p>
<h4 id="蓝牙模块的使用"><a href="#蓝牙模块的使用" class="headerlink" title="蓝牙模块的使用"></a>蓝牙模块的使用</h4><p>在蓝牙模块的使用时，我们需要用到USB转TTL模块</p>
<img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009110653822.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009110653822.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="输入图片说明" title="在这里输入图片标题" style="zoom: 33%;" />



<p><strong>连接方式</strong></p>
<table>
<thead>
<tr>
<th align="center">JDY-31</th>
<th align="center">USB转TTL</th>
</tr>
</thead>
<tbody><tr>
<td align="center">RXD</td>
<td align="center">TXD</td>
</tr>
<tr>
<td align="center">TXD</td>
<td align="center">RXD</td>
</tr>
<tr>
<td align="center">GND</td>
<td align="center">GND</td>
</tr>
<tr>
<td align="center">VCC</td>
<td align="center">VCC</td>
</tr>
<tr>
<td align="center">EN</td>
<td align="center">3.3V或5V</td>
</tr>
</tbody></table>
<p>(进入AT指令模式只需要将EN引脚拉高即可，所以接3.3v或5v都可）</p>
<p><strong>串口配置</strong></p>
<p><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009113221751.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009113221751.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="输入图片说明" title="在这里输入图片标题" style="zoom:50%;" />初次连接波特率、停止位、数据位、校验位按图中配置，勾选发送新行</p>
<p><strong>指令</strong></p>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
<th align="center">响应</th>
<th align="center">参数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">版本号</td>
<td align="center">AT+VERSION</td>
<td align="center">+VERSION=JDY-31-V1.35,Bluetooth V3.0</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">复位</td>
<td align="center">AT+RESET</td>
<td align="center">+OK</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">断开连接</td>
<td align="center">AT+DISC</td>
<td align="center">+OK</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">MAC地址</td>
<td align="center">AT+LADDR</td>
<td align="center">+LADDR=<Param></td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">波特率查询</td>
<td align="center">AT+BAUD</td>
<td align="center">+BAUD=<Param></td>
<td align="center">Param:(4到9) 4：9600; 5：19200; 6：38400; 7：57600; 8：115200; 9：128000</td>
</tr>
<tr>
<td align="center">波特率设置</td>
<td align="center">AT+BAUD<Param></td>
<td align="center">+OK</td>
<td align="center">Param同上一行</td>
</tr>
<tr>
<td align="center">密码查询</td>
<td align="center">AT+PIN</td>
<td align="center">+PIN=<Param></td>
<td align="center">Param：4位密码 默认PIN：1234</td>
</tr>
<tr>
<td align="center">密码修改</td>
<td align="center">AT+PIN<Param></td>
<td align="center">+OK</td>
<td align="center">Param同上一行</td>
</tr>
<tr>
<td align="center">广播名查询</td>
<td align="center">AT+NAME</td>
<td align="center">+NAME=<Param></td>
<td align="center">Param：BLE广播名; 最长：18字节; 默认广播名：JDY-31-SPP</td>
</tr>
<tr>
<td align="center">广播名修改</td>
<td align="center">AT+NAME<Param></td>
<td align="center">+OK</td>
<td align="center">Param同上一行</td>
</tr>
<tr>
<td align="center">恢复出厂配置</td>
<td align="center">AT+DEFAULT</td>
<td align="center">OK</td>
<td align="center">无</td>
</tr>
</tbody></table>
<p><strong>执行指令</strong><br><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009130057674.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/image-20211009130057674.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="输入图片说明" title="在这里输入图片标题" style="zoom:50%;" />下面只需要在串口助手发送窗口输入指定指令即可</p>
]]></content>
      <categories>
        <category>单片机</category>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS运行Gazebo遇到的问题</title>
    <url>/2021/12/04/ROS%E8%BF%90%E8%A1%8CGazebo%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>运行</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rosrun gazebo_ros gazebo</span><br></pre></td></tr></table></figure></div>

<p>遇到下列错误</p>
<h2 id="错误：-Err-REST-cc-205-Error-in-REST-request"><a href="#错误：-Err-REST-cc-205-Error-in-REST-request" class="headerlink" title="错误：[Err] [REST.cc:205] Error in REST request"></a>错误：[Err] [REST.cc:205] Error in REST request</h2><p><img src="REST.png" class="lazyload placeholder" data-srcset="REST.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>1.修改<code>~/.ignition/fuel/config.yaml</code>文件</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo gedit ~/.ignition/fuel/config.yaml</span><br></pre></td></tr></table></figure></div>

<p>2.</p>
<p>注释 <code>url : https://api.ignitionfuel.org</code><br>添加 <code>url: https://api.ignitionrobotics.org</code></p>
<p><img src="config_yml.png" class="lazyload placeholder" data-srcset="config_yml.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p>再重新启动Gazebo即可。</p>
<h2 id="错误：VMware-vmw-ioctl-command-error-无效的参数"><a href="#错误：VMware-vmw-ioctl-command-error-无效的参数" class="headerlink" title="错误：VMware: vmw_ioctl_command error 无效的参数"></a>错误：VMware: vmw_ioctl_command error 无效的参数</h2><p><img src="%E6%97%A0%E6%95%88%E5%8F%82%E6%95%B0.png" class="lazyload placeholder" data-srcset="%E6%97%A0%E6%95%88%E5%8F%82%E6%95%B0.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在终端设置环境变量为0:</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ export SVGA_VGPU10=0</span><br></pre></td></tr></table></figure></div>

<p>长久方法：</p>
<p>在~/.bashrc文件写入<code>export SVGA_VGPU10=0</code></p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;export SVGA_VGPU10=0&quot; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></div>

<p>再重新启动Gazebo即可。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>VMware</tag>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32蓝牙小车三</title>
    <url>/2021/11/14/STM32%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6%E4%B8%89/</url>
    <content><![CDATA[<h1 id="STM32基础项目：基于stm32f1的蓝牙遥控小车（三）"><a href="#STM32基础项目：基于stm32f1的蓝牙遥控小车（三）" class="headerlink" title="STM32基础项目：基于stm32f1的蓝牙遥控小车（三）"></a>STM32基础项目：基于stm32f1的蓝牙遥控小车（三）</h1><span id="more"></span>

<h3 id="STM32通过串口实现蓝牙通信"><a href="#STM32通过串口实现蓝牙通信" class="headerlink" title="STM32通过串口实现蓝牙通信"></a>STM32通过串口实现蓝牙通信</h3><p>我们这里仅使用蓝牙串口通信实现单字节数据的传输，这些就足以控制小车的运动了。我们这里用Usart1来实现蓝牙通信，然后通过检测蓝牙发送的单字节数来简单控制单片机led灯的亮灭。<br>stm32f103c8t6的led灯的引脚为PC13，所以对PC13进行配置。</p>
<div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line"> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"> 	</span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);	 <span class="comment">//使能GPIOC端口时钟</span></span><br><span class="line">	</span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;				 <span class="comment">//LED--&gt;PC.5 端口配置</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 <span class="comment">//推挽输出</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 <span class="comment">//IO口速度为50MHz</span></span><br><span class="line"> GPIO_Init(GPIOC, &amp;GPIO_InitStructure);					 <span class="comment">//根据设定参数初始化GPIOC.13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对Usart1进行配置</p>
<div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Usart1_Init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//GPIO端口设置</span></span><br><span class="line">  	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	USART_InitTypeDef USART_InitStructure;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	 </span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA, ENABLE);	<span class="comment">//使能USART1，GPIOA时钟</span></span><br><span class="line">	<span class="comment">//USART1_TX   GPIOA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//PA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	<span class="comment">//复用推挽输出</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIOA.9</span></span><br><span class="line">  <span class="comment">//USART1_RX	  GPIOA.10初始化</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;<span class="comment">//PA10</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;<span class="comment">//浮空输入</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIOA.10  </span></span><br><span class="line">  <span class="comment">//Usart1 NVIC 配置</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority= <span class="number">3</span>;<span class="comment">//抢占优先级3</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;		<span class="comment">//子优先级3</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//IRQ通道使能</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);	<span class="comment">//根据指定的参数初始化VIC寄存器</span></span><br><span class="line">   <span class="comment">//USART 初始化设置</span></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//串口波特率</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//字长为8位数据格式</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶校验位</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	<span class="comment">//收发模式</span></span><br><span class="line"></span><br><span class="line">    USART_Init(USART1, &amp;USART_InitStructure); <span class="comment">//初始化串口1</span></span><br><span class="line">    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<span class="comment">//开启串口接受中断</span></span><br><span class="line">    USART_Cmd(USART1, ENABLE);                    <span class="comment">//使能串口1 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>连接</strong></p>
<table>
<thead>
<tr>
<th align="center">JDY-31</th>
<th align="center">stm32f103c8t6</th>
</tr>
</thead>
<tbody><tr>
<td align="center">RX</td>
<td align="center">PA9</td>
</tr>
<tr>
<td align="center">TX</td>
<td align="center">PA10</td>
</tr>
<tr>
<td align="center">VCC</td>
<td align="center">VCC</td>
</tr>
<tr>
<td align="center">GND</td>
<td align="center">GND</td>
</tr>
</tbody></table>
<p>我们这里设置当串口检测到蓝牙发送数字0，LED亮，发送数字1，LED灭。<br>首先对LED进行定义<br><code>#define LED PCout(13)</code><br>再写串口中断服务函数</p>
<div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 res;</span><br><span class="line">	<span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) <span class="comment">//接收中断</span></span><br><span class="line">	&#123;</span><br><span class="line">	res = USART_ReceiveData(USART1);</span><br><span class="line">	<span class="keyword">if</span>(res == <span class="number">0</span>)</span><br><span class="line">		LED = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">		LED = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="蓝牙APP制作"><a href="#蓝牙APP制作" class="headerlink" title="蓝牙APP制作"></a>蓝牙APP制作</h3><p>下面我们来用蓝牙app发送信号给串口，蓝牙APP制作网站：<a href="http://app.gzjkw.net/login/">http://app.gzjkw.net/login/</a><br>登录后进入界面，先点击左上角的项目，然后新建项目，注意项目名称要以字母开头并且仅支持字母、数字及下划线。<br><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/%E8%93%9D%E7%89%99APP.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/%E8%93%9D%E7%89%99APP.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="蓝牙app制作"></p>
<p>各个组件的属性可根据自己的爱好配置。<br>组件设计完后，下面进入到蓝牙APP的逻辑设计，在网页右上角点击进入逻辑设计。<br><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="逻辑设计"></p>
<p>点击相应的组件，可出现对应的逻辑板块，在进行选择与配置。<br><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/%E9%80%BB%E8%BE%91%E6%9D%BF%E5%9D%97.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/%E9%80%BB%E8%BE%91%E6%9D%BF%E5%9D%97.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="逻辑板块" style="zoom: 50%;" /></p>
<p>最后在菜单栏里找到打包apk选项，点击打包apk并显示二维码，手机扫描二维码下载，然后在手机设置中，找到蓝牙模块的广播名，输入PIN连接，打开app，点击蓝牙选择，找到蓝牙模块，连接即可。<br>这时你会看到，点击开灯按钮，LED亮；关灯按钮，LED灭。</p>
]]></content>
      <categories>
        <category>单片机</category>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32蓝牙小车二</title>
    <url>/2021/11/14/STM32%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="STM32基础项目：基于stm32f1的蓝牙遥控小车（二）"><a href="#STM32基础项目：基于stm32f1的蓝牙遥控小车（二）" class="headerlink" title="STM32基础项目：基于stm32f1的蓝牙遥控小车（二）"></a>STM32基础项目：基于stm32f1的蓝牙遥控小车（二）</h1><span id="more"></span>

<h3 id="STM32控制电机的转动方向和速度"><a href="#STM32控制电机的转动方向和速度" class="headerlink" title="STM32控制电机的转动方向和速度"></a>STM32控制电机的转动方向和速度</h3><h4 id="GPIO配置控制电机转向"><a href="#GPIO配置控制电机转向" class="headerlink" title="GPIO配置控制电机转向"></a>GPIO配置控制电机转向</h4><p>首先我们知道在stm32控制led灯的时候，我们将led灯的引脚输出高电平就会亮，led灯引脚输出低电平是就会灭。同理我们在简单控制直流电机转动方向时，因为直流电机有两个引脚，所以我们需要用单片机的两个IO口来控制直流电机，例如当第一路输出高电平，第二路输出低电平，就可以使电机正转；反之第一路输出低电平，第二路输出高点平，就可以使电机反转。</p>
<p><strong>程序实现</strong></p>
<p>==motor.h==</p>
<div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MOTOR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MOTOR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Motor_1 PAout(5)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Motor_2 PAout(6)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Motor_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Turn_A</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Turn_B</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Turn_stop</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>==motor.c==</p>
<div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;motor.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Motor_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<span class="comment">//开启GPIOA时钟</span></span><br><span class="line">	<span class="comment">//GPIO初始化配置</span></span><br><span class="line">	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;<span class="comment">//推挽输出</span></span><br><span class="line">	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;<span class="comment">//设置PA5、PA6控制电机IO口</span></span><br><span class="line">	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//IO口速度为50MHz</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Turn_A</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//正转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Motor_1 = <span class="number">1</span>;</span><br><span class="line">	Motor_2 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Turn_B</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//反转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Motor_1 = <span class="number">0</span>;</span><br><span class="line">	Motor_2 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Turn_stop</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//停止</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Motor_1 = <span class="number">0</span>;</span><br><span class="line">	Motor_2 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>接线图</strong></p>
<p><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/L298n.bmp" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/L298n.bmp" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="L298N接线图"></p>
<p>L298N接STM32的PA5和PA6引脚</p>
<h4 id="PWM配置直流电机的速度与方向"><a href="#PWM配置直流电机的速度与方向" class="headerlink" title="PWM配置直流电机的速度与方向"></a>PWM配置直流电机的速度与方向</h4><p>由上面程序可看到只能实现对电机转动方向的控制，电机的速度一直是5v电源供给，速度保持恒定值，无法实现对电机速度的控制。下面我们就来使用PWM来调节直流电机的速度，PWM即脉冲宽度调制(PWM)，是利用微处理器的数字输出来对模拟电路进行控制的一种非常有效的技术。即对脉冲宽度的控制。在STM32例程中有通过PWM实现呼吸灯的实验，通过占空比的大小变化来使led灯的亮度变化。<br>通过PWM调速有两种方法：一种是拔掉跳线帽通道使能，在通道使能处输入一个pwm信号，在逻辑输入逻辑信号；一种是不拔掉跳线帽，在逻辑输入两个pwm信号来控制电机速度和转向。<br>我们这里使用不拔掉跳线帽，即第二种方法。<br><strong>原理</strong><br>占空比可以实现对电机转速的调节，我们知道，占空比是高电平在一个周期之中的比值，高电平的所占的比值越大，占空比就越大，对于直流电机来讲，电机输出端引脚是高电平电机就可以转动，当输出端高电平时，电机会转动，但是是一点一点的提速，在高电平突然转向低电平时，电机由于电感有防止电流突变的作用是不会停止的，会保持这原有的转速，以此往复，电机的转速就是周期内输出的平均电压值，所以实质上我们调速是将电机处于一种，似停非停，似全速转动又非全速转动的状态，那么在一个周期的平均速度就是我们占空比调出来的速度了。<br>总结： 在电机控制中，电压越大，电机转速越快，而通过PWM输出不同的模拟电压，便可以使电机达到不同的输出转速。<br><strong>程序实现</strong><br>==motor.h==</p>
<div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MOTOR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MOTOR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">My_TIM3_Init</span><span class="params">(u16 arr,u16 psc)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></div>

<p>==motor.c==</p>
<div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//PA6,PA7 TIM3CH12</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">My_TIM3_Init</span><span class="params">(u16 arr,u16 psc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class="line">	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;</span><br><span class="line">	TIM_OCInitTypeDef TIM_OCInitStruct;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);<span class="comment">//开启GPIOA时钟</span></span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);<span class="comment">//开启TIM3时钟</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);<span class="comment">//开启端口复用功能</span></span><br><span class="line">	<span class="comment">//GPIOA初始化</span></span><br><span class="line">	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_AF_PP;<span class="comment">//复用推挽</span></span><br><span class="line">	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_6|GPIO_Pin_7;</span><br><span class="line">	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">	<span class="comment">//定时器初始化</span></span><br><span class="line">	TIM_TimeBaseInitStruct.TIM_ClockDivision=TIM_CKD_DIV1;<span class="comment">//分频因子</span></span><br><span class="line">	TIM_TimeBaseInitStruct.TIM_CounterMode=TIM_CounterMode_Up;<span class="comment">//向上计数</span></span><br><span class="line">	TIM_TimeBaseInitStruct.TIM_Period=arr;<span class="comment">//自动重装载值</span></span><br><span class="line">	TIM_TimeBaseInitStruct.TIM_Prescaler=psc;<span class="comment">//预分频系数</span></span><br><span class="line">	<span class="comment">//输出比较初始化</span></span><br><span class="line">	TIM_OCInitStruct.TIM_OCMode=TIM_OCMode_PWM1;</span><br><span class="line">	TIM_OCInitStruct.TIM_OCNPolarity=TIM_OCPolarity_High;</span><br><span class="line">	TIM_OCInitStruct.TIM_OutputState=TIM_OutputState_Enable;</span><br><span class="line">	</span><br><span class="line">	TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseInitStruct);</span><br><span class="line">	TIM_OC1Init(TIM3,&amp;TIM_OCInitStruct);<span class="comment">//通道1</span></span><br><span class="line">	TIM_OC2Init(TIM3,&amp;TIM_OCInitStruct);<span class="comment">//通道2</span></span><br><span class="line">	</span><br><span class="line">	TIM_OC1PreloadConfig(TIM3,TIM_OCPreload_Enable);<span class="comment">//使能预装载寄存器</span></span><br><span class="line">	TIM_OC2PreloadConfig(TIM3,TIM_OCPreload_Enable);</span><br><span class="line">  	TIM_Cmd(TIM3,ENABLE);        <span class="comment">//使能TIM3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里使用了TIM3的CH1和CH2，所以对PA6和PA7的引脚进行配置</p>
<p><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/TIM3ch1ch2.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/TIM3ch1ch2.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="tim3ch1ch2"></p>
<p>然后我们可以使用</p>
<p><code>TIM_SetComparex(TIM3, PWM);</code>这个函数来对直流电机的控制</p>
<p>==main.c==</p>
<div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	delay_init(); <span class="comment">//延时函数初始化</span></span><br><span class="line">	My_TIM3_Init((<span class="number">20000</span><span class="number">-1</span>),(<span class="number">72</span><span class="number">-1</span>)); <span class="comment">//周期为20ms  （arr+1）(psc+1)/Tclk</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		TIM_SetCompare1(TIM3, <span class="number">2000</span>);<span class="comment">//正慢转2s</span></span><br><span class="line">		TIM_SetCompare2(TIM3, <span class="number">0</span>);</span><br><span class="line">        delay_s(<span class="number">2</span>);</span><br><span class="line">		TIM_SetCompare1(TIM3, <span class="number">10000</span>);<span class="comment">//正快转2s</span></span><br><span class="line">		TIM_SetCompare2(TIM3, <span class="number">0</span>); </span><br><span class="line">        delay_s(<span class="number">2</span>);</span><br><span class="line">        TIM_SetCompare1(TIM3, <span class="number">0</span>);<span class="comment">//反慢转2s</span></span><br><span class="line">		TIM_SetCompare2(TIM3, <span class="number">2000</span>);</span><br><span class="line">        delay_s(<span class="number">2</span>);</span><br><span class="line">		TIM_SetCompare1(TIM3, <span class="number">0</span>);<span class="comment">//反快转2s</span></span><br><span class="line">		TIM_SetCompare2(TIM3, <span class="number">10000</span>); </span><br><span class="line">        delay_s(<span class="number">2</span>);</span><br><span class="line">		TIM_SetCompare1(TIM3, <span class="number">0</span>);<span class="comment">//停止</span></span><br><span class="line">		TIM_SetCompare2(TIM3, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>由于stm32中自带的延时函数观察电机转动的现象不明显，所以我们可以自己写一段以秒为单位的延时，在==delay.c==中添加以下代码</p>
<div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_s</span><span class="params">(u16 ns)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ns; i++)</span><br><span class="line">	delay_ms(<span class="number">1000</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>将程序烧录到stm32中，我们就可以实现电机的速度和转向的调节了。</p>
]]></content>
      <categories>
        <category>单片机</category>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04连接摄像头蓝屏</title>
    <url>/2021/11/28/Ubuntu18-04%E8%BF%9E%E6%8E%A5%E6%91%84%E5%83%8F%E5%A4%B4%E8%93%9D%E5%B1%8F/</url>
    <content><![CDATA[<h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>最近在使用Ubuntu18.04时，尝试用<code>cheese</code>命令打开摄像头,一开始发现虚拟机设置选项中没有USB控制器，于是手动添加了USB控制器，当开启虚拟机后，连接摄像头时电脑出现蓝屏重启问题。</p>
<p><img src="%E9%97%AE%E9%A2%98.png" class="lazyload placeholder" data-srcset="%E9%97%AE%E9%A2%98.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h4 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h4><p>我使用的是VMware15，可能存在版本兼容问题，下载VMware16问题就解决了。</p>
<p><img src="%E8%A7%A3%E5%86%B3.png" class="lazyload placeholder" data-srcset="%E8%A7%A3%E5%86%B3.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="成功连接"></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32蓝牙小车四</title>
    <url>/2021/11/14/STM32%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="STM32基础项目：基于stm32f1的蓝牙遥控小车（四）"><a href="#STM32基础项目：基于stm32f1的蓝牙遥控小车（四）" class="headerlink" title="STM32基础项目：基于stm32f1的蓝牙遥控小车（四）"></a>STM32基础项目：基于stm32f1的蓝牙遥控小车（四）</h1><span id="more"></span>

<p>接下来我们只需要简单的修改下程序及蓝牙app就完成蓝牙遥控小车的制作了。</p>
<h3 id="电机驱动"><a href="#电机驱动" class="headerlink" title="电机驱动"></a>电机驱动</h3><p>由于小车为二轮驱动，所以我们用TIM3的CH1~CH4,引脚为别为PA6、PA7、PB0、PB1。</p>
<h4 id="motor-c"><a href="#motor-c" class="headerlink" title="motor.c"></a>motor.c</h4><div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">My_TIM3_Init</span><span class="params">(u16 arr,u16 psc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class="line">	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;</span><br><span class="line">	TIM_OCInitTypeDef TIM_OCInitStruct;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO,ENABLE);</span><br><span class="line">	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_AF_PP;<span class="comment">//复用推挽</span></span><br><span class="line">	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_6|GPIO_Pin_7;</span><br><span class="line">	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line">	</span><br><span class="line">	TIM_TimeBaseInitStruct.TIM_ClockDivision=TIM_CKD_DIV1;<span class="comment">//分频因子</span></span><br><span class="line">	TIM_TimeBaseInitStruct.TIM_CounterMode=TIM_CounterMode_Up;<span class="comment">//向上计数</span></span><br><span class="line">	TIM_TimeBaseInitStruct.TIM_Period=arr;<span class="comment">//自动重装载值</span></span><br><span class="line">	TIM_TimeBaseInitStruct.TIM_Prescaler=psc;<span class="comment">//预分频系数</span></span><br><span class="line">	</span><br><span class="line">	TIM_OCInitStruct.TIM_OCMode=TIM_OCMode_PWM1;</span><br><span class="line">	TIM_OCInitStruct.TIM_OCNPolarity=TIM_OCPolarity_High;</span><br><span class="line">	TIM_OCInitStruct.TIM_OutputState=TIM_OutputState_Enable;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_AF_PP;<span class="comment">//复用推挽</span></span><br><span class="line">	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_0|GPIO_Pin_1;</span><br><span class="line">	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStruct);</span><br><span class="line">	TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseInitStruct);</span><br><span class="line">	TIM_OC1Init(TIM3,&amp;TIM_OCInitStruct);<span class="comment">//通道1</span></span><br><span class="line">	TIM_OC2Init(TIM3,&amp;TIM_OCInitStruct);<span class="comment">//通道2</span></span><br><span class="line">	</span><br><span class="line">	TIM_OC1PreloadConfig(TIM3,TIM_OCPreload_Enable);        <span class="comment">//使能预装载寄存器</span></span><br><span class="line">	TIM_OC2PreloadConfig(TIM3,TIM_OCPreload_Enable);</span><br><span class="line">	</span><br><span class="line">	TIM_OC3Init(TIM3,&amp;TIM_OCInitStruct);<span class="comment">//通道3</span></span><br><span class="line">	TIM_OC4Init(TIM3,&amp;TIM_OCInitStruct);<span class="comment">//通道4</span></span><br><span class="line">	</span><br><span class="line">	TIM_OC3PreloadConfig(TIM3,TIM_OCPreload_Enable);        <span class="comment">//使能预装载寄存器</span></span><br><span class="line">	TIM_OC4PreloadConfig(TIM3,TIM_OCPreload_Enable);</span><br><span class="line">  	TIM_Cmd(TIM3,ENABLE);        <span class="comment">//使能TIM3</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motor_front</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//前进</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		TIM_SetCompare1(TIM3, <span class="number">6000</span>);</span><br><span class="line">		TIM_SetCompare2(TIM3, <span class="number">500</span>); </span><br><span class="line">		TIM_SetCompare3(TIM3, <span class="number">500</span>);</span><br><span class="line">		TIM_SetCompare4(TIM3, <span class="number">6000</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motor_back</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//后退</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		TIM_SetCompare1(TIM3, <span class="number">500</span>);</span><br><span class="line">		TIM_SetCompare2(TIM3, <span class="number">6000</span>); </span><br><span class="line">		TIM_SetCompare3(TIM3, <span class="number">6000</span>);</span><br><span class="line">		TIM_SetCompare4(TIM3, <span class="number">500</span>); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motor_left</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//左转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		TIM_SetCompare1(TIM3, <span class="number">500</span>);</span><br><span class="line">		TIM_SetCompare2(TIM3, <span class="number">500</span>); </span><br><span class="line">		TIM_SetCompare3(TIM3, <span class="number">500</span>);</span><br><span class="line">		TIM_SetCompare4(TIM3, <span class="number">4000</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motor_right</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//右转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		TIM_SetCompare1(TIM3, <span class="number">4000</span>);</span><br><span class="line">		TIM_SetCompare2(TIM3, <span class="number">500</span>); </span><br><span class="line">		TIM_SetCompare3(TIM3, <span class="number">500</span>);</span><br><span class="line">		TIM_SetCompare4(TIM3, <span class="number">500</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motor_stop</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//停止</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		TIM_SetCompare1(TIM3, <span class="number">500</span>);</span><br><span class="line">		TIM_SetCompare2(TIM3, <span class="number">500</span>); </span><br><span class="line">		TIM_SetCompare3(TIM3, <span class="number">500</span>);</span><br><span class="line">		TIM_SetCompare4(TIM3, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="蓝牙控制"><a href="#蓝牙控制" class="headerlink" title="蓝牙控制"></a>蓝牙控制</h3><h4 id="串口中断服务函数修改"><a href="#串口中断服务函数修改" class="headerlink" title="串口中断服务函数修改"></a>串口中断服务函数修改</h4><div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 res;</span><br><span class="line">	<span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) <span class="comment">//接收中断</span></span><br><span class="line">	&#123;</span><br><span class="line">		res = USART_ReceiveData(USART1);</span><br><span class="line">		<span class="keyword">switch</span> (res)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0x00</span>: motor_stop(); <span class="keyword">break</span>;<span class="comment">//停止</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">0x01</span>: motor_front(); <span class="keyword">break</span>;<span class="comment">//前进</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">0x02</span>: motor_back(); <span class="keyword">break</span>;<span class="comment">//后退</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">0x03</span>: motor_left(); <span class="keyword">break</span>;<span class="comment">//左转</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">0x04</span>: motor_right(); <span class="keyword">break</span>;<span class="comment">//右转</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="蓝牙APP修改"><a href="#蓝牙APP修改" class="headerlink" title="蓝牙APP修改"></a>蓝牙APP修改</h4><p><strong>组件修改</strong></p>
<img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="按钮组件" style="zoom:67%;" />

<p><strong>逻辑修改</strong></p>
<img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/%E6%8C%89%E9%92%AE.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/%E6%8C%89%E9%92%AE.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="逻辑修改" style="zoom: 67%;" />

<p>最后烧录程序，一个简单的蓝牙遥控小车就完成了。</p>
<p>视频演示地址：<a href="https://www.bilibili.com/video/BV1cq4y1Z72B?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1cq4y1Z72B?spm_id_from=333.999.0.0</a></p>
]]></content>
      <categories>
        <category>单片机</category>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04遇到的问题</title>
    <url>/2021/11/17/Ubuntu18-04%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="Ubuntu18-04-Sogou搜狗输入法选词面板在终端乱码问题"><a href="#Ubuntu18-04-Sogou搜狗输入法选词面板在终端乱码问题" class="headerlink" title="Ubuntu18.04 Sogou搜狗输入法选词面板在终端乱码问题"></a>Ubuntu18.04 Sogou搜狗输入法选词面板在终端乱码问题</h2><span id="more"></span>

<p><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/ubuntu_sougou.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/ubuntu_sougou.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="Sougou输入法乱码"></p>
<p><strong>解决方法</strong></p>
<p>1.在Ubuntu中打开 系统设置–&gt;区域和语言–&gt;管理已安装语言，将键盘输入法系统设置为fcitx.</p>
<img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/ubuntu.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/ubuntu.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="setting" style="zoom: 80%;" />

<p>2.打开终端，输入fcitx-configtool</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fcitx-configtool</span><br></pre></td></tr></table></figure></div>

<p>3.不要把搜狗拼音放在第一位，如果放在第一位就会出现选词板乱码现象；通过上下箭头把Sogou Pinyin放在第二位，乱码现象自然消失，问题解决。（如果没有搜狗拼音，通过“+” 添加搜狗拼音）<br><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/configtool.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/configtool.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h2 id="Ubuntu18-04-鼠标箭头频闪问题"><a href="#Ubuntu18-04-鼠标箭头频闪问题" class="headerlink" title="Ubuntu18.04 鼠标箭头频闪问题"></a>Ubuntu18.04 鼠标箭头频闪问题</h2><p><img src="mouse_shake.gif" class="lazyload placeholder" data-srcset="mouse_shake.gif" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="mouse_shake"></p>
<p><strong>解决方法</strong></p>
<p>在windows界面打开设置–&gt;设备–&gt;鼠标–&gt;其他鼠标选项–&gt;指针选项</p>
<p>打勾显示指针轨迹，并改为短<br><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/mouse.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/mouse.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" style="zoom:80%;" /></p>
<p>问题解决</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode在Ubuntu18.04空格长度减小问题</title>
    <url>/2021/11/20/VSCode%E5%9C%A8Ubuntu18-04%E7%A9%BA%E6%A0%BC%E9%95%BF%E5%BA%A6%E5%87%8F%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在Ubuntu18.04空格长度太小，难以辨识。</p>
<span id="more"></span>
<p>在网上找到两种方法。</p>
<h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>1.<code>firacode</code>字体安装<br>在终端输入以下命令下载字体</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install fonts-firacode</span><br></pre></td></tr></table></figure></div>

<p>2.打开VSCode，按键<code>ctrl+p</code>输入<code>settings.json</code>找到文件</p>
<p>在文件配置中加入以下代码</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;editor.fontFamily&quot;: &quot;Fira Code&quot;,</span><br><span class="line">   &quot;editor.fontLigatures&quot;: true,</span><br></pre></td></tr></table></figure></div>

<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>打开VSCode的设置选项，直接在搜索设置项中输入<code>font</code><br><img src="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/vscode_font.png" class="lazyload placeholder" data-srcset="https://gitee.com/GHigher1026/ghigher/raw/master/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE/STM32%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%EF%BC%9A%E5%9F%BA%E4%BA%8Estm32f1%E7%9A%84%E8%93%9D%E7%89%99%E5%B0%8F%E8%BD%A6/vscode_font.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p>选中字体，然后再字体系列框中输入<code>monospace</code></p>
<p>对比两种方法之后，采用第二种更加简单容易。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客添加gif动图</title>
    <url>/2021/11/24/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0gif%E5%8A%A8%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="坑——写在前面"><a href="#坑——写在前面" class="headerlink" title="坑——写在前面"></a>坑——写在前面</h2><p>在网上搜过很多添加gif动图的方法，但都不尽人意，其问题都出在<code>hexo s</code>后可以正常显示，但<code>hexo d</code>上传后就无法查看。</p>
<span id="more"></span>

<p>eg:</p>
<div class="highlight-wrap" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">100</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">src</span>=<span class="string">&quot;gif 图片地址&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这是html直接插入gif图片地址，在上传之后gif无法显示。</p>
<p>下面直入正题：</p>
<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><h3 id="1-gif录取软件"><a href="#1-gif录取软件" class="headerlink" title="1.gif录取软件"></a>1.gif录取软件</h3><p>GifCam 是用于创建动画图像或 GIF 的免费软件。Windows工具的工作原理类似于相机或屏幕录像机，可为所需区域拍摄一系列照片。它稍后将它们保存为易于共享和播放的<strong>动画图像</strong>或<strong>AVI 文件</strong>。虽然该工具具有<strong>多种用途</strong>且易于操作，但它仅适用于 Windows。<br><a href="http://blog.bahraniapps.com/gifcam/#download">官网下载地址 </a>或者 百度网盘下载链接：<a href="https://pan.baidu.com/s/1W_wNTVyw8UJWO2Ahgi4Q8g">下载地址</a>  提取码：19c3</p>
<h3 id="2-更改配置"><a href="#2-更改配置" class="headerlink" title="2.更改配置"></a>2.更改配置</h3><p>打开hexo博客根目录下的<code>_config.yml</code>文件，更改以下配置</p>
<div class="highlight-wrap" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为true后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片及gif资源了。</p>
<h3 id="3-设置路径并引用"><a href="#3-设置路径并引用" class="headerlink" title="3.设置路径并引用"></a>3.设置路径并引用</h3><p>用Typora软件设置好图像根目录为自己的同名文件夹，格式–&gt;图像–&gt;设置图片根目录</p>
<p>写文章是直接引用就可以了</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure></div>

<p><img src="gif.png" class="lazyload placeholder" data-srcset="gif.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="使用方法"></p>
<p>这样上传之后gif图片就可以正常显示了。。。</p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客绑定域名的问题</title>
    <url>/2021/11/25/hexo%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>绑定域名，参照学长的文章<a href="http://zhangguixin.top/2021/11/06/hexo/hexo%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/">【地址】</a></p>
<h2 id="1-ipv6解析地址"><a href="#1-ipv6解析地址" class="headerlink" title="1.ipv6解析地址"></a>1.ipv6解析地址</h2><p>我的博客地址并非ipv4地址，而是ipv6地址</p>
<p><img src="ipv6.png" class="lazyload placeholder" data-srcset="ipv6.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p>阿里云解析地址的新手引导只针对为ipv4地址，因此ipv6地址需要自己手动添加。</p>
<p><img src="ipv4.png" class="lazyload placeholder" data-srcset="ipv4.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<p>手动添加配置如下：</p>
<p><img src="ipv6%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0.png" class="lazyload placeholder" data-srcset="ipv6%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
<h2 id="2-加速方法"><a href="#2-加速方法" class="headerlink" title="2.加速方法"></a>2.加速方法</h2><p><a href="https://blog.csdn.net/i_do_not_know_you/article/details/105594269">参考文章</a></p>
<p>但说实话我感觉不到什么区别，借鉴以下还是不错的</p>
<h2 id="3-解决上传后需重新绑定域名的问题"><a href="#3-解决上传后需重新绑定域名的问题" class="headerlink" title="3.解决上传后需重新绑定域名的问题"></a>3.解决上传后需重新绑定域名的问题</h2><p>绑定域名后，每次<code>hexo d</code>，网页就会出现404，然后再需要重新再绑定域名，非常麻烦</p>
<p>解决方法：</p>
<p>在hexo博客目录下<code>source</code>创建一个<code>CNAME</code>文件，在里面添加上你的新域名，例如我的就是: <code>yuchanghui.top</code></p>
<p>⚠：注意没有后缀！！！</p>
<p>然后<code>hexo g</code>重新生成</p>
<p><code>hexo d</code>重新上传就好了。。。</p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客美化</title>
    <url>/2021/11/22/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="博客添加live2d小人"><a href="#博客添加live2d小人" class="headerlink" title="博客添加live2d小人"></a>博客添加live2d小人</h2><h3 id="1-安装模块"><a href="#1-安装模块" class="headerlink" title="1.安装模块"></a>1.安装模块</h3><p>在hexo博客根目录下，打开Git，输入下面命令：</p>
<span id="more"></span>

<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d  </span><br></pre></td></tr></table></figure></div>

<h3 id="2-下载live2d模型"><a href="#2-下载live2d模型" class="headerlink" title="2.下载live2d模型"></a>2.下载live2d模型</h3><p>模型选择<a href="https://gitcode.net/mirrors/xiazeyu/live2d-widget-models?utm_source=csdn_github_accelerator">点击此处</a>，模型预览<a href="https://huaji8.top/post/live2d-plugin-2.0/">点击此处</a>，这里我用的是<code>live2d-widget-model-hijiki</code>，输入以下命令下载：</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-hijiki</span><br></pre></td></tr></table></figure></div>

<p>根据自己的喜好选择相应模型，修改即可。</p>
<h3 id="3-配置-config-yml文件"><a href="#3-配置-config-yml文件" class="headerlink" title="3.配置_config.yml文件"></a>3.配置<code>_config.yml</code>文件</h3><p>打开hexo根目录下的<code>_config.yml</code>文件，添加如下代码：</p>
<div class="highlight-wrap" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">	<span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">	<span class="attr">model:</span> </span><br><span class="line">		<span class="attr">use:</span> <span class="string">live2d-widget-model-hijiki</span> <span class="comment">#模型选择</span></span><br><span class="line">	<span class="attr">display:</span> </span><br><span class="line">		<span class="attr">position:</span> <span class="string">left</span>  <span class="comment">#模型位置</span></span><br><span class="line">		<span class="attr">width:</span> <span class="number">150</span>       <span class="comment">#模型宽度</span></span><br><span class="line">		<span class="attr">height:</span> <span class="number">300</span>      <span class="comment">#模型高度</span></span><br><span class="line">	<span class="attr">mobile:</span> </span><br><span class="line">		<span class="attr">show:</span> <span class="literal">true</span>      <span class="comment">#是否在手机端显示</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-效果图"><a href="#4-效果图" class="headerlink" title="4.效果图"></a>4.效果图</h3><p><img src="hijiki.gif" class="lazyload placeholder" data-srcset="hijiki.gif" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="hijiki"></p>
<h2 id="博客添加canvas-nest背景特效"><a href="#博客添加canvas-nest背景特效" class="headerlink" title="博客添加canvas-nest背景特效"></a>博客添加canvas-nest背景特效</h2><p>Bamboo主题自带的只有ribbon一种背景特效，nest需要手动添加。</p>
<h3 id="1-修改主题下的layout-ejs文件"><a href="#1-修改主题下的layout-ejs文件" class="headerlink" title="1. 修改主题下的layout.ejs文件"></a>1. 修改主题下的<code>layout.ejs</code>文件</h3><p>仿照ribbon部分的代码</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	...</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">	&lt;% if(theme.nest.on === true ) &#123; %&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; color=&quot;0,0,0&quot; opacity=&#x27;0.6&#x27; zIndex=&quot;-1&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-参数修改"><a href="#2-参数修改" class="headerlink" title="2.参数修改"></a>2.参数修改</h3><ul>
<li><strong><code>color</code></strong>: 线条颜色, 默认: <code>&#39;0,0,0&#39;</code> ；三个数字分别为(R,G,B)，注意用,分割</li>
<li><strong><code>opacity</code></strong>: 线条透明度（0~1）, 默认: <code>0.5</code></li>
<li><strong><code>count</code></strong>: 线条的总数量, 默认: <code>150</code></li>
<li><strong><code>zIndex</code></strong>: 背景的z-index属性，css属性用于控制所在层的位置, 默认: <code>-1</code></li>
</ul>
<h3 id="3-修改主题下的-config-yml文件"><a href="#3-修改主题下的-config-yml文件" class="headerlink" title="3.修改主题下的_config.yml文件"></a>3.修改主题下的<code>_config.yml</code>文件</h3><p>同样仿照ribbon代码</p>
<div class="highlight-wrap" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">on:</span> <span class="literal">false</span> <span class="comment"># 关闭ribbon背景特效</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nest:</span></span><br><span class="line">  <span class="attr">on:</span> <span class="literal">true</span> <span class="comment"># 开启nest背景特效</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-效果图-1"><a href="#4-效果图-1" class="headerlink" title="4.效果图"></a>4.效果图</h3><p><img src="nest.gif" class="lazyload placeholder" data-srcset="nest.gif" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="nest"></p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python与stm32通信</title>
    <url>/2022/01/19/python%E4%B8%8Estm32%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="python与stm32通信"><a href="#python与stm32通信" class="headerlink" title="python与stm32通信"></a>python与stm32通信</h1><p>学习了python也学习了stm32，而如何将他们结合起来呢，于是我上网寻找资料，终于发现python早已给我们提供了优质的串口函数库——pyserial。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>可以直接在<code>cmd</code>输入命令</p>
<div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pyserial</span><br></pre></td></tr></table></figure></div>

<p>或者在pycharm中下载相应的packages。（注意是pyserial库，而不是serial库）</p>
<h3 id="stm32代码"><a href="#stm32代码" class="headerlink" title="stm32代码"></a>stm32代码</h3><p>代码直接照搬正点原子的串口函数代码，只做了个简单的修改。</p>
<div class="highlight-wrap" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 串口中断函数无改变</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                	<span class="comment">//串口1中断服务程序</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	u8 Res;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS 		<span class="comment">//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.</span></span></span><br><span class="line">	OSIntEnter();    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  <span class="comment">//接收中断(接收到的数据必须是0x0d 0x0a结尾)</span></span><br><span class="line">		&#123;</span><br><span class="line">		Res =USART_ReceiveData(USART1);	<span class="comment">//读取接收到的数据</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>((USART_RX_STA&amp;<span class="number">0x8000</span>)==<span class="number">0</span>)<span class="comment">//接收未完成</span></span><br><span class="line">			&#123;</span><br><span class="line">			<span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x4000</span>)<span class="comment">//接收到了0x0d</span></span><br><span class="line">				&#123;</span><br><span class="line">				<span class="keyword">if</span>(Res!=<span class="number">0x0a</span>)USART_RX_STA=<span class="number">0</span>;<span class="comment">//接收错误,重新开始</span></span><br><span class="line">				<span class="keyword">else</span> USART_RX_STA|=<span class="number">0x8000</span>;	<span class="comment">//接收完成了 </span></span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="comment">//还没收到0X0D</span></span><br><span class="line">				&#123;	</span><br><span class="line">				<span class="keyword">if</span>(Res==<span class="number">0x0d</span>)USART_RX_STA|=<span class="number">0x4000</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">					USART_RX_BUF[USART_RX_STA&amp;<span class="number">0X3FFF</span>]=Res ;</span><br><span class="line">					USART_RX_STA++;</span><br><span class="line">					<span class="keyword">if</span>(USART_RX_STA&gt;(USART_REC_LEN<span class="number">-1</span>))USART_RX_STA=<span class="number">0</span>;<span class="comment">//接收数据错误,重新开始接收	  </span></span><br><span class="line">					&#125;		 </span><br><span class="line">				&#125;</span><br><span class="line">			&#125;   		 </span><br><span class="line">     &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS 	<span class="comment">//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.</span></span></span><br><span class="line">	OSIntExit();  											 </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;	 </span><br><span class="line">	delay_init();	    	 <span class="comment">//延时函数初始化	</span></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">// 设置中断优先级分组2</span></span><br><span class="line">	uart_init(<span class="number">9600</span>);	 <span class="comment">//串口初始化为9600</span></span><br><span class="line">	LED_Init();		  	 <span class="comment">//初始化与LED连接的硬件接口 </span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;/r/nhello python/r/n&quot;</span>);</span><br><span class="line">	&#125;	 </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h3><p>这里也是随便写了写</p>
<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        port = <span class="string">&#x27;COM10&#x27;</span>  <span class="comment"># 串口号</span></span><br><span class="line">        baud = <span class="number">9600</span>  <span class="comment"># 波特率</span></span><br><span class="line">        ser = serial.Serial(port, baud, timeout=<span class="number">0.5</span>)</span><br><span class="line">        flag = ser.isOpen()</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;串口打开成功&quot;</span>)</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                send_datas = <span class="built_in">input</span>(<span class="string">&quot;请输入要发送的数据:&quot;</span>)</span><br><span class="line">                ser.write(<span class="built_in">str</span>(send_datas).encode(<span class="string">&quot;gbk&quot;</span>))</span><br><span class="line">                <span class="keyword">if</span> send_datas == <span class="string">&#x27;close&#x27;</span>:</span><br><span class="line">                    ser.close()</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;关闭串口&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                data = ser.read(ser.in_waiting).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> data != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;已接受到数据:&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;串口打开异常&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>还有就是stm32烧录后，不用打开串口助手（如XCOM)，这样会使串口占用，发生异常。</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="python_serial.png" class="lazyload placeholder" data-srcset="python_serial.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>
]]></content>
      <categories>
        <category>单片机</category>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>STM32</tag>
      </tags>
  </entry>
</search>
